>>> from pandas import Series,DataFrame
>>> import pandas as pd
>>> import numpy as np
>>> from datetime import datetime
>>> now=datetime.now()
>>> now
datetime.datetime(2019, 5, 20, 21, 7, 59, 729421)
>>> now.year,now.month,now.day
(2019, 5, 20)
>>> delta=datetime(2011,1,7)-datetime(2008,6,24)
>>> delta
datetime.timedelta(927)
>>> delta=datetime(2011,1,7)-datetime(2008,6,24,8,15)
>>> delta
datetime.timedelta(926, 56700)
>>> delta.days
926
>>> delta.seconds
56700
>>> from datetime import timedelta
>>> start=datetime(2011,1,7)
>>> start+timedelta(12)
datetime.datetime(2011, 1, 19, 0, 0)
>>> start-2*timedelta(12)
datetime.datetime(2010, 12, 14, 0, 0)
>>> stamp=datetime(2011,1,3)
>>> str(stamp)
'2011-01-03 00:00:00'
>>> stamp.strftime('%Y-%m-%d')
'2011-01-03'
>>> value='2011-01-03'
>>> datetime.strptime(value,'%Y-%m-%d')
datetime.datetime(2011, 1, 3, 0, 0)
>>> datestrs=['7/6/2011','8/6/2011']
>>> [datetime.strptime(x,'%m/%d/%Y') for x in datestrs]
[datetime.datetime(2011, 7, 6, 0, 0), datetime.datetime(2011, 8, 6, 0, 0)]
>>> from dateutil.parser import parse
>>> parse('2011-01-03')
datetime.datetime(2011, 1, 3, 0, 0)
>>> parse('Jan 31,1997 10:45 PM')
datetime.datetime(2019, 1, 31, 22, 45)
>>> parse('6/12/2011',dayfirst=True)
datetime.datetime(2011, 12, 6, 0, 0)
>>> datestrs=['2011-07-06 12:00:00','2011-08-06 00:00:00']
>>> pd.to_datetime(datestrs)
DatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00'], dtype='datetime64[ns]', freq=None)
>>> idx=pd.to_datetime(datestrs+[None])
>>> idx
DatetimeIndex(['2011-07-06 12:00:00', '2011-08-06 00:00:00', 'NaT'], dtype='datetime64[ns]', freq=None)
>>> idx[2]
NaT
>>> pd.isnull(idx)
array([False, False,  True])
>>> dates=[datetime(2011,1,2),datetime(2011,1,5),datetime(2011,1,7),datetime(2011,1,8),datetime(2011,1,10),datetime(2011,1,12)]
>>> ts=pd.Series(np.random.randn(6),index=dates)
>>> ts
2011-01-02    1.534794
2011-01-05    1.682838
2011-01-07    0.898709
2011-01-08    1.070061
2011-01-10    0.742332
2011-01-12   -1.443218
dtype: float64
>>> ts.index
DatetimeIndex(['2011-01-02', '2011-01-05', '2011-01-07', '2011-01-08',
               '2011-01-10', '2011-01-12'],
              dtype='datetime64[ns]', freq=None)
>>> ts+ts[::2]
2011-01-02    3.069588
2011-01-05         NaN
2011-01-07    1.797419
2011-01-08         NaN
2011-01-10    1.484664
2011-01-12         NaN
dtype: float64
>>> ts.index.dtype
dtype('<M8[ns]')
>>> stamp=ts.index[0]
>>> stamp
Timestamp('2011-01-02 00:00:00')
>>> stamp=ts.index[2]
>>> ts[stamp]
0.8987094573020424
>>> ts['1/10/2011']
0.7423321795430415
>>> ts['20110110']
0.7423321795430415
>>> longer_ts=pd.Series(np.random.randn(1000),index=pd.date_range('1/1/2000',periods=1000))
>>> longer_ts
2000-01-01   -0.623294
2000-01-02   -0.634026
2000-01-03    0.597426
2000-01-04   -0.306465
2000-01-05    0.034276
2000-01-06    0.360293
2000-01-07   -1.829890
2000-01-08   -0.199607
2000-01-09    0.675506
2000-01-10    0.609421
2000-01-11   -1.130246
2000-01-12    0.082419
2000-01-13    0.065298
2000-01-14   -0.367087
2000-01-15    0.614278
2000-01-16   -0.418056
2000-01-17   -0.726421
2000-01-18   -1.485554
2000-01-19   -1.939076
2000-01-20    0.283641
2000-01-21    0.262310
2000-01-22    0.785518
2000-01-23    0.470987
2000-01-24    0.932667
2000-01-25    0.764888
2000-01-26   -1.349524
2000-01-27   -0.744734
2000-01-28    0.166546
2000-01-29    1.012610
2000-01-30    0.966602
                ...   
2002-08-28    0.654791
2002-08-29   -0.333794
2002-08-30   -1.339439
2002-08-31    0.999912
2002-09-01    0.929076
2002-09-02   -2.202347
2002-09-03    1.109016
2002-09-04   -0.500233
2002-09-05    0.704215
2002-09-06    0.570214
2002-09-07   -0.114361
2002-09-08   -1.278685
2002-09-09   -1.066207
2002-09-10    0.195288
2002-09-11   -1.334189
2002-09-12    0.024707
2002-09-13    0.417800
2002-09-14    0.690170
2002-09-15    0.876413
2002-09-16   -2.851708
2002-09-17    0.245952
2002-09-18    0.362587
2002-09-19    1.053413
2002-09-20    0.574050
2002-09-21   -0.862246
2002-09-22   -0.953565
2002-09-23    2.047830
2002-09-24    0.215611
2002-09-25   -1.156691
2002-09-26    0.113608
Freq: D, Length: 1000, dtype: float64
>>> longer_ts['2001-05']
2001-05-01   -1.095188
2001-05-02    1.146195
2001-05-03   -0.233926
2001-05-04   -1.521112
2001-05-05    1.765416
2001-05-06   -0.739004
2001-05-07   -0.995989
2001-05-08    0.150248
2001-05-09    0.574767
2001-05-10   -0.562427
2001-05-11    1.033844
2001-05-12   -0.547675
2001-05-13    0.537207
2001-05-14   -1.614059
2001-05-15   -0.632680
2001-05-16    0.275747
2001-05-17   -0.254875
2001-05-18    0.645625
2001-05-19    0.173881
2001-05-20   -0.210436
2001-05-21   -0.053736
2001-05-22   -0.140839
2001-05-23   -1.270958
2001-05-24    1.237287
2001-05-25   -0.367318
2001-05-26   -1.778539
2001-05-27   -0.601305
2001-05-28   -2.215521
2001-05-29    0.037933
2001-05-30   -0.951993
2001-05-31    0.600964
Freq: D, dtype: float64
>>> ts[datetime(2011,1,7):]
2011-01-07    0.898709
2011-01-08    1.070061
2011-01-10    0.742332
2011-01-12   -1.443218
dtype: float64
>>> ts
2011-01-02    1.534794
2011-01-05    1.682838
2011-01-07    0.898709
2011-01-08    1.070061
2011-01-10    0.742332
2011-01-12   -1.443218
dtype: float64
>>> ts['1/6/2011':'1/11/2011']
2011-01-07    0.898709
2011-01-08    1.070061
2011-01-10    0.742332
dtype: float64
>>> ts.truncate(after='1/9/2011')
2011-01-02    1.534794
2011-01-05    1.682838
2011-01-07    0.898709
2011-01-08    1.070061
dtype: float64
>>> dates=pd.date_range('1/1/2000',periods=100,freq='W-WED')
>>> long_df=pd.DataFrame(np.random.randn(100,4),index=dates,columns=['Colorado','Texas','New York','Ohio'])
>>> long_df.loc['5-2001']
            Colorado     Texas  New York      Ohio
2001-05-02  0.373974  0.388488 -1.126174  0.158041
2001-05-09 -1.462039  0.046717 -1.793968 -1.068680
2001-05-16  1.428114 -0.669129 -0.079163 -0.607379
2001-05-23 -1.099339 -0.962096 -0.250151  1.530302
2001-05-30 -0.464684  1.342663  0.665441  0.282126
>>> dates=pd.DatetimeIndex(['1/1/2000','1/2/2000','1/2/2000','1/2/2000','1/3/2000'])
>>> dup_ts=pd.Series(np.arange(5),index=dates)
>>> dup_ts
2000-01-01    0
2000-01-02    1
2000-01-02    2
2000-01-02    3
2000-01-03    4
dtype: int32
>>> dup_ts.index.is_unique
False
>>> dup_ts['1/3/2000']
4
>>> dup_ts['1/2/2000']
2000-01-02    1
2000-01-02    2
2000-01-02    3
dtype: int32
>>> grouped=dup_ts.groupby(level=0)
>>> grouped.mean()
2000-01-01    0
2000-01-02    2
2000-01-03    4
dtype: int32
>>> grouped.count()
2000-01-01    1
2000-01-02    3
2000-01-03    1
dtype: int64
>>> ts
2011-01-02    1.534794
2011-01-05    1.682838
2011-01-07    0.898709
2011-01-08    1.070061
2011-01-10    0.742332
2011-01-12   -1.443218
dtype: float64
>>> index=pd.date_range('2012-04-01','2012-06-01')
>>> index
DatetimeIndex(['2012-04-01', '2012-04-02', '2012-04-03', '2012-04-04',
               '2012-04-05', '2012-04-06', '2012-04-07', '2012-04-08',
               '2012-04-09', '2012-04-10', '2012-04-11', '2012-04-12',
               '2012-04-13', '2012-04-14', '2012-04-15', '2012-04-16',
               '2012-04-17', '2012-04-18', '2012-04-19', '2012-04-20',
               '2012-04-21', '2012-04-22', '2012-04-23', '2012-04-24',
               '2012-04-25', '2012-04-26', '2012-04-27', '2012-04-28',
               '2012-04-29', '2012-04-30', '2012-05-01', '2012-05-02',
               '2012-05-03', '2012-05-04', '2012-05-05', '2012-05-06',
               '2012-05-07', '2012-05-08', '2012-05-09', '2012-05-10',
               '2012-05-11', '2012-05-12', '2012-05-13', '2012-05-14',
               '2012-05-15', '2012-05-16', '2012-05-17', '2012-05-18',
               '2012-05-19', '2012-05-20', '2012-05-21', '2012-05-22',
               '2012-05-23', '2012-05-24', '2012-05-25', '2012-05-26',
               '2012-05-27', '2012-05-28', '2012-05-29', '2012-05-30',
               '2012-05-31', '2012-06-01'],
              dtype='datetime64[ns]', freq='D')
>>> pd.date_range(start='2012-04-01',periods=20)
DatetimeIndex(['2012-04-01', '2012-04-02', '2012-04-03', '2012-04-04',
               '2012-04-05', '2012-04-06', '2012-04-07', '2012-04-08',
               '2012-04-09', '2012-04-10', '2012-04-11', '2012-04-12',
               '2012-04-13', '2012-04-14', '2012-04-15', '2012-04-16',
               '2012-04-17', '2012-04-18', '2012-04-19', '2012-04-20'],
              dtype='datetime64[ns]', freq='D')
>>> pd.date_range(end='2012-06-01',periods=20)
DatetimeIndex(['2012-05-13', '2012-05-14', '2012-05-15', '2012-05-16',
               '2012-05-17', '2012-05-18', '2012-05-19', '2012-05-20',
               '2012-05-21', '2012-05-22', '2012-05-23', '2012-05-24',
               '2012-05-25', '2012-05-26', '2012-05-27', '2012-05-28',
               '2012-05-29', '2012-05-30', '2012-05-31', '2012-06-01'],
              dtype='datetime64[ns]', freq='D')
>>> pd.date_range('2000-01-01','2000-12-01',freq='BM')
DatetimeIndex(['2000-01-31', '2000-02-29', '2000-03-31', '2000-04-28',
               '2000-05-31', '2000-06-30', '2000-07-31', '2000-08-31',
               '2000-09-29', '2000-10-31', '2000-11-30'],
              dtype='datetime64[ns]', freq='BM')
>>> #想生成一个由每月最后一个工作日组成的日期索引，传入"BM"频率即可
>>> pd.date_range('2000-01-01','2000-12-31',freq='BMS')
DatetimeIndex(['2000-01-03', '2000-02-01', '2000-03-01', '2000-04-03',
               '2000-05-01', '2000-06-01', '2000-07-03', '2000-08-01',
               '2000-09-01', '2000-10-02', '2000-11-01', '2000-12-01'],
              dtype='datetime64[ns]', freq='BMS')
>>> pd.date_range('2012-05-02 12:56:31',periods=5)
DatetimeIndex(['2012-05-02 12:56:31', '2012-05-03 12:56:31',
               '2012-05-04 12:56:31', '2012-05-05 12:56:31',
               '2012-05-06 12:56:31'],
              dtype='datetime64[ns]', freq='D')
>>> pd.date_range('2012-05-02 12:56:31',periods=5,normalize=True)
DatetimeIndex(['2012-05-02', '2012-05-03', '2012-05-04', '2012-05-05',
               '2012-05-06'],
              dtype='datetime64[ns]', freq='D')
>>> from pandas.tseries.offsets import Hour,Minute
>>> hour=Hour()
>>> hour
<Hour>
>>> four_hours=Hour(4)
>>> four_hours
<4 * Hours>
>>> pd.date_range('2000-01-01','2000-01-03 23:59',freq='4h')
DatetimeIndex(['2000-01-01 00:00:00', '2000-01-01 04:00:00',
               '2000-01-01 08:00:00', '2000-01-01 12:00:00',
               '2000-01-01 16:00:00', '2000-01-01 20:00:00',
               '2000-01-02 00:00:00', '2000-01-02 04:00:00',
               '2000-01-02 08:00:00', '2000-01-02 12:00:00',
               '2000-01-02 16:00:00', '2000-01-02 20:00:00',
               '2000-01-03 00:00:00', '2000-01-03 04:00:00',
               '2000-01-03 08:00:00', '2000-01-03 12:00:00',
               '2000-01-03 16:00:00', '2000-01-03 20:00:00'],
              dtype='datetime64[ns]', freq='4H')
>>> Hour(2)+Minute(30)
<150 * Minutes>
>>> pd.date_range('2000-01-01',periods=10,freq='1h30min')
DatetimeIndex(['2000-01-01 00:00:00', '2000-01-01 01:30:00',
               '2000-01-01 03:00:00', '2000-01-01 04:30:00',
               '2000-01-01 06:00:00', '2000-01-01 07:30:00',
               '2000-01-01 09:00:00', '2000-01-01 10:30:00',
               '2000-01-01 12:00:00', '2000-01-01 13:30:00'],
              dtype='datetime64[ns]', freq='90T')
>>> rng=pd.date_range('2012-01-01','2012-09-01',freq='WOM-3FRI')
>>> list(rng)
[Timestamp('2012-01-20 00:00:00', freq='WOM-3FRI'), Timestamp('2012-02-17 00:00:00', freq='WOM-3FRI'), Timestamp('2012-03-16 00:00:00', freq='WOM-3FRI'), Timestamp('2012-04-20 00:00:00', freq='WOM-3FRI'), Timestamp('2012-05-18 00:00:00', freq='WOM-3FRI'), Timestamp('2012-06-15 00:00:00', freq='WOM-3FRI'), Timestamp('2012-07-20 00:00:00', freq='WOM-3FRI'), Timestamp('2012-08-17 00:00:00', freq='WOM-3FRI')]
>>> ts=pd.Series(np.random.randn(4),index=pd.date_range('1/1/2000',periods=4,freq='M'))
>>> ts
2000-01-31   -0.552418
2000-02-29   -1.898229
2000-03-31   -0.630242
2000-04-30    0.283735
Freq: M, dtype: float64
>>> ts.shift(2)
2000-01-31         NaN
2000-02-29         NaN
2000-03-31   -0.552418
2000-04-30   -1.898229
Freq: M, dtype: float64
>>> ts.shift(-2)
2000-01-31   -0.630242
2000-02-29    0.283735
2000-03-31         NaN
2000-04-30         NaN
Freq: M, dtype: float64
>>> ts/ts.shift(1)-1
2000-01-31         NaN
2000-02-29    2.436222
2000-03-31   -0.667984
2000-04-30   -1.450201
Freq: M, dtype: float64
>>> ts.shift(2,freq='M')
2000-03-31   -0.552418
2000-04-30   -1.898229
2000-05-31   -0.630242
2000-06-30    0.283735
Freq: M, dtype: float64
>>> ts.shift(3,freq='D')
2000-02-03   -0.552418
2000-03-03   -1.898229
2000-04-03   -0.630242
2000-05-03    0.283735
dtype: float64
>>> ts.shift(1,freq='90T')
2000-01-31 01:30:00   -0.552418
2000-02-29 01:30:00   -1.898229
2000-03-31 01:30:00   -0.630242
2000-04-30 01:30:00    0.283735
Freq: M, dtype: float64
>>> now=datetime(2011,11,17)
>>> now+3*Day()
Timestamp('2011-11-20 00:00:00')
>>> now+MonthEnd()
Timestamp('2011-11-30 00:00:00')
>>> now+MonthEnd(2)
Timestamp('2011-12-31 00:00:00')
>>> offset=MonthEnd()
>>> offset.rollforward(now)
Timestamp('2011-11-30 00:00:00')
>>> offset.rollback(now)
Timestamp('2011-10-31 00:00:00')
>>> ts=pd.Series(np.random.randn(20),index=pd.date_range('1/15/2000',periods=20,freq='4d'))
>>> ts
2000-01-15    1.629199
2000-01-19    0.297652
2000-01-23   -1.251708
2000-01-27   -2.138997
2000-01-31    0.591087
2000-02-04    0.926667
2000-02-08   -2.016622
2000-02-12   -0.408556
2000-02-16   -0.921975
2000-02-20   -0.776103
2000-02-24    1.067240
2000-02-28    0.085757
2000-03-03    1.366714
2000-03-07   -1.297090
2000-03-11   -0.973303
2000-03-15    0.710076
2000-03-19    0.908500
2000-03-23   -2.131333
2000-03-27   -1.103319
2000-03-31   -0.656827
Freq: 4D, dtype: float64
>>> ts.groupby(offset.rollforward).mean()
2000-01-31   -0.174553
2000-02-29   -0.291942
2000-03-31   -0.397073
dtype: float64
>>> ts.resample('M').mean()
2000-01-31   -0.174553
2000-02-29   -0.291942
2000-03-31   -0.397073
Freq: M, dtype: float64
>>> import pytz
>>> pytz.common_timezones[-5:]
['US/Eastern', 'US/Hawaii', 'US/Mountain', 'US/Pacific', 'UTC']
>>> tz=pytz.timezone('America/New_York')
>>> tz
<DstTzInfo 'America/New_York' LMT-1 day, 19:04:00 STD>
>>> rng=pd.date_range('3/9/2012 9:30',periods=6,freq='D')
>>> ts=pd.Series(np.random.randn(len(rng)),index=rng)
>>> ts
2012-03-09 09:30:00    0.144062
2012-03-10 09:30:00   -1.701437
2012-03-11 09:30:00   -0.266316
2012-03-12 09:30:00   -0.427858
2012-03-13 09:30:00   -2.321689
2012-03-14 09:30:00    0.412801
Freq: D, dtype: float64
>>> print(ts.index.tz)
None
>>> pd.date_range('3/9/2012 9:30',periods=10,freq='D',tz='UTC')
DatetimeIndex(['2012-03-09 09:30:00+00:00', '2012-03-10 09:30:00+00:00',
               '2012-03-11 09:30:00+00:00', '2012-03-12 09:30:00+00:00',
               '2012-03-13 09:30:00+00:00', '2012-03-14 09:30:00+00:00',
               '2012-03-15 09:30:00+00:00', '2012-03-16 09:30:00+00:00',
               '2012-03-17 09:30:00+00:00', '2012-03-18 09:30:00+00:00'],
              dtype='datetime64[ns, UTC]', freq='D')
>>> ts
2012-03-09 09:30:00    0.144062
2012-03-10 09:30:00   -1.701437
2012-03-11 09:30:00   -0.266316
2012-03-12 09:30:00   -0.427858
2012-03-13 09:30:00   -2.321689
2012-03-14 09:30:00    0.412801
Freq: D, dtype: float64
>>> ts_utc=ts.tz_localize('UTC')
>>> ts_utc
2012-03-09 09:30:00+00:00    0.144062
2012-03-10 09:30:00+00:00   -1.701437
2012-03-11 09:30:00+00:00   -0.266316
2012-03-12 09:30:00+00:00   -0.427858
2012-03-13 09:30:00+00:00   -2.321689
2012-03-14 09:30:00+00:00    0.412801
Freq: D, dtype: float64
>>> ts_utc.index
DatetimeIndex(['2012-03-09 09:30:00+00:00', '2012-03-10 09:30:00+00:00',
               '2012-03-11 09:30:00+00:00', '2012-03-12 09:30:00+00:00',
               '2012-03-13 09:30:00+00:00', '2012-03-14 09:30:00+00:00'],
              dtype='datetime64[ns, UTC]', freq='D')
>>> ts_utc.tz_convert('America/New_York')
2012-03-09 04:30:00-05:00    0.144062
2012-03-10 04:30:00-05:00   -1.701437
2012-03-11 05:30:00-04:00   -0.266316
2012-03-12 05:30:00-04:00   -0.427858
2012-03-13 05:30:00-04:00   -2.321689
2012-03-14 05:30:00-04:00    0.412801
Freq: D, dtype: float64
>>> ts_eastern=ts.tz_localize('America/New_York')
>>> ts_eastern.tz_convert('UTC')
2012-03-09 14:30:00+00:00    0.144062
2012-03-10 14:30:00+00:00   -1.701437
2012-03-11 13:30:00+00:00   -0.266316
2012-03-12 13:30:00+00:00   -0.427858
2012-03-13 13:30:00+00:00   -2.321689
2012-03-14 13:30:00+00:00    0.412801
Freq: D, dtype: float64
>>> ts_eastern.tz_convert('Europe/Berlin')
2012-03-09 15:30:00+01:00    0.144062
2012-03-10 15:30:00+01:00   -1.701437
2012-03-11 14:30:00+01:00   -0.266316
2012-03-12 14:30:00+01:00   -0.427858
2012-03-13 14:30:00+01:00   -2.321689
2012-03-14 14:30:00+01:00    0.412801
Freq: D, dtype: float64
>>> ts.index.tz_localize('Asia/Shanghai')
DatetimeIndex(['2012-03-09 09:30:00+08:00', '2012-03-10 09:30:00+08:00',
               '2012-03-11 09:30:00+08:00', '2012-03-12 09:30:00+08:00',
               '2012-03-13 09:30:00+08:00', '2012-03-14 09:30:00+08:00'],
              dtype='datetime64[ns, Asia/Shanghai]', freq='D')
>>> stamp=pd.Timestamp('2011-03-12 04:00')
>>> stamp_utc=stamp.tz_localize('utc')
>>> stamp_utc.tz_convert('America/New_York')
Timestamp('2011-03-11 23:00:00-0500', tz='America/New_York')
>>> Timestamp('2011-03-11 23:00:00-0500',tz='America/New_York')
>>> stamp_moscow=pd.Timestamp('2011-03-12 04:00',tz='Europe/Moscow')
>>> stamp_moscow
Timestamp('2011-03-12 04:00:00+0300', tz='Europe/Moscow')
>>> stamp_utc.value
1299902400000000000
>>> stamp_utc.tz_convert('America/New_York').value
1299902400000000000
>>> from pandas.tseries.offsets import Hour
>>> stamp=pd.Timestamp('2012-03-12 01:30',tz='US/Eastern')
>>> stamp
Timestamp('2012-03-12 01:30:00-0400', tz='US/Eastern')
>>> stamp+Hour()
Timestamp('2012-03-12 02:30:00-0400', tz='US/Eastern')
>>> stamp=pd.Timestamp('2012-11-04 00:30',tz='US/Eastern')
>>> stamp
Timestamp('2012-11-04 00:30:00-0400', tz='US/Eastern')
>>> stamp+2*Hour()
Timestamp('2012-11-04 01:30:00-0500', tz='US/Eastern')
>>> rng=pd.date_range('3/7/2012 9:30',periods=10,freq='B')
>>> ts=pd.Series(np.random.randn(len(rng)),index=rng)
>>> ts
2012-03-07 09:30:00   -0.698195
2012-03-08 09:30:00    0.120163
2012-03-09 09:30:00    0.908392
2012-03-12 09:30:00    0.544554
2012-03-13 09:30:00    2.082820
2012-03-14 09:30:00    0.229792
2012-03-15 09:30:00    2.333983
2012-03-16 09:30:00   -0.183076
2012-03-19 09:30:00    0.567939
2012-03-20 09:30:00    0.391480
Freq: B, dtype: float64
>>> ts1=ts[:7].tz_localize('Europe/London')
		    
>>> ts2=ts1[2:].tz_convert('Europe/Moscow')
		    
>>> result=ts1+ts2
		    
>>> result.index
		    
DatetimeIndex(['2012-03-07 09:30:00+00:00', '2012-03-08 09:30:00+00:00',
               '2012-03-09 09:30:00+00:00', '2012-03-12 09:30:00+00:00',
               '2012-03-13 09:30:00+00:00', '2012-03-14 09:30:00+00:00',
               '2012-03-15 09:30:00+00:00'],
              dtype='datetime64[ns, UTC]', freq='B')
>>> p=pd.Period(2007,freq='A-DEC')
		    
>>> p
		    
Period('2007', 'A-DEC')
>>> p+5
		    
Period('2012', 'A-DEC')
>>> p-2
		    
Period('2005', 'A-DEC')
>>> pd.Period('2014',freq='A-DEC')-p
		    
<7 * YearEnds: month=12>
>>> rng=pd.period_range('2000-01-01','2000-06-30',freq='M')
		    
>>> rng
		    
PeriodIndex(['2000-01', '2000-02', '2000-03', '2000-04', '2000-05', '2000-06'], dtype='period[M]', freq='M')
>>> pd.Series(np.random.randn(6),index=rng)
		    
2000-01    0.443113
2000-02   -0.523508
2000-03   -0.440054
2000-04    0.827772
2000-05    0.080068
2000-06    1.120654
Freq: M, dtype: float64
>>> values=['2001Q3','2002Q2','2002Q1']
		    
>>> index=pd.PeriodIndex(values,freq='Q-DEC')
		    
>>> p=pd.Period('2007',freq='A-DEC')
		    
>>> p
		    
Period('2007', 'A-DEC')
>>> p.asfreq('M',how='start')
		    
Period('2007-01', 'M')
>>> p.asfreq('M',how='end')
		    
Period('2007-12', 'M')
>>> 
		    
>>> p=pd.Period('2007',freq='A-JUN')
		    
>>> p
		    
Period('2007', 'A-JUN')
>>> p.asfreq('M','start')
		    
Period('2006-07', 'M')
>>> p.asfreq('M','end')
		    
Period('2007-06', 'M')
>>> p=pd.Period('Aug-2007','M')
		    
>>> p.asfreq('A-JUN')
		    
Period('2008', 'A-JUN')
>>> rng=pd.period_range('2006','2009',freq='A-DEC')
		    
>>> ts=pd.Series(np.random.randn(len(rng)),index=rng)
		    
>>> ts
		    
2006    1.450463
2007   -1.919514
2008    0.191818
2009    0.051724
Freq: A-DEC, dtype: float64
>>> ts.asfreq('M',how='start')
		    
2006-01    1.450463
2007-01   -1.919514
2008-01    0.191818
2009-01    0.051724
Freq: M, dtype: float64
>>> ts.asfreq('B',how='end')
		    
2006-12-29    1.450463
2007-12-31   -1.919514
2008-12-31    0.191818
2009-12-31    0.051724
Freq: B, dtype: float64
>>> p=pd.Period('2012Q4',freq='Q-JAN')
		    
>>> p
		    
Period('2012Q4', 'Q-JAN')
>>> p.asfreq('D','start')
		    
Period('2011-11-01', 'D')
>>> p.asfreq('D','end')
		    
Period('2012-01-31', 'D')
>>> p4pm=(p.asfreq('B','e')-1).asfreq('T','s')+16*60
		    
>>> p4pm
		    
Period('2012-01-30 16:00', 'T')
>>> p4pm.to_timestamp()
		    
Timestamp('2012-01-30 16:00:00')
>>> rng=pd.period_range('2011Q3','2012Q4',freq='Q-JAN')
		    
>>> ts=pd.Series(np.arange(len(rng)),index=rng)
		    
>>> ts
		    
2011Q3    0
2011Q4    1
2012Q1    2
2012Q2    3
2012Q3    4
2012Q4    5
Freq: Q-JAN, dtype: int32
>>> new_rng=(rng.asfreq('B','e')-1).asfreq('T','s')+16*60
		    
>>> ts.index=new_rng.to_timestamp()
		    
>>> ts
		    
2010-10-28 16:00:00    0
2011-01-28 16:00:00    1
2011-04-28 16:00:00    2
2011-07-28 16:00:00    3
2011-10-28 16:00:00    4
2012-01-30 16:00:00    5
dtype: int32
>>> rng=pd.date_range('2000-01-01',periods=3,freq='M')
		    
>>> ts=pd.Series(np.random.randn(3),index=rng)
		     
>>> ts
		     
2000-01-31   -1.316304
2000-02-29   -2.121188
2000-03-31   -1.077233
Freq: M, dtype: float64
>>> pts=ts.to_period()
		     
>>> pts
		     
2000-01   -1.316304
2000-02   -2.121188
2000-03   -1.077233
Freq: M, dtype: float64
>>> rng=pd.date_range('1/29/2000',periods=6,freq='D')
		     
>>> ts2=pd.Series(np.random.randn(6),index=rng)
		     
>>> ts2
		     
2000-01-29   -1.748539
2000-01-30    0.101185
2000-01-31    0.208337
2000-02-01   -1.259581
2000-02-02   -0.249063
2000-02-03   -1.335988
Freq: D, dtype: float64
>>> ts2.to_period('M')
		     
2000-01   -1.748539
2000-01    0.101185
2000-01    0.208337
2000-02   -1.259581
2000-02   -0.249063
2000-02   -1.335988
Freq: M, dtype: float64
>>> pts=ts2.to_period()
		     
>>> pts
		     
2000-01-29   -1.748539
2000-01-30    0.101185
2000-01-31    0.208337
2000-02-01   -1.259581
2000-02-02   -0.249063
2000-02-03   -1.335988
Freq: D, dtype: float64
>>> pts.to_timestamp(how='end')
		     
2000-01-29 23:59:59.999999999   -1.748539
2000-01-30 23:59:59.999999999    0.101185
2000-01-31 23:59:59.999999999    0.208337
2000-02-01 23:59:59.999999999   -1.259581
2000-02-02 23:59:59.999999999   -0.249063
2000-02-03 23:59:59.999999999   -1.335988
Freq: D, dtype: float64
>>> file='D:\python\pra\macrodata.csv'
		     
>>> data=pd.read_csv(file)
		     
>>> data.head(5)
		     
   year  quarter   realgdp  realcons  ...  unemp      pop  infl  realint
0  1959        1  2710.349    1707.4  ...    5.8  177.146  0.00     0.00
1  1959        2  2778.801    1733.7  ...    5.1  177.830  2.34     0.74
2  1959        3  2775.488    1751.8  ...    5.3  178.657  2.74     1.09
3  1959        4  2785.204    1753.7  ...    5.6  179.386  0.27     4.06
4  1960        1  2847.699    1770.5  ...    5.2  180.007  2.31     1.19

[5 rows x 14 columns]
>>> data.year
		     
0      1959
1      1959
2      1959
3      1959
4      1960
5      1960
6      1960
7      1960
8      1961
9      1961
10     1961
11     1961
12     1962
13     1962
14     1962
15     1962
16     1963
17     1963
18     1963
19     1963
20     1964
21     1964
22     1964
23     1964
24     1965
25     1965
26     1965
27     1965
28     1966
29     1966
       ... 
173    2002
174    2002
175    2002
176    2003
177    2003
178    2003
179    2003
180    2004
181    2004
182    2004
183    2004
184    2005
185    2005
186    2005
187    2005
188    2006
189    2006
190    2006
191    2006
192    2007
193    2007
194    2007
195    2007
196    2008
197    2008
198    2008
199    2008
200    2009
201    2009
202    2009
Name: year, Length: 203, dtype: int64
>>> data.quarter
		     
0      1
1      2
2      3
3      4
4      1
5      2
6      3
7      4
8      1
9      2
10     3
11     4
12     1
13     2
14     3
15     4
16     1
17     2
18     3
19     4
20     1
21     2
22     3
23     4
24     1
25     2
26     3
27     4
28     1
29     2
      ..
173    2
174    3
175    4
176    1
177    2
178    3
179    4
180    1
181    2
182    3
183    4
184    1
185    2
186    3
187    4
188    1
189    2
190    3
191    4
192    1
193    2
194    3
195    4
196    1
197    2
198    3
199    4
200    1
201    2
202    3
Name: quarter, Length: 203, dtype: int64
>>> index=pd.PeriodIndex(year=data.year,quarter=data.quarter,freq='Q-DEC')
		    
>>> data.index=index
		    
>>> data.infl
		    
1959Q1    0.00
1959Q2    2.34
1959Q3    2.74
1959Q4    0.27
1960Q1    2.31
1960Q2    0.14
1960Q3    2.70
1960Q4    1.21
1961Q1   -0.40
1961Q2    1.47
1961Q3    0.80
1961Q4    0.80
1962Q1    2.26
1962Q2    0.13
1962Q3    2.11
1962Q4    0.79
1963Q1    0.53
1963Q2    2.75
1963Q3    0.78
1963Q4    2.46
1964Q1    0.13
1964Q2    0.90
1964Q3    1.29
1964Q4    2.05
1965Q1    1.28
1965Q2    2.54
1965Q3    0.89
1965Q4    2.90
1966Q1    4.99
1966Q2    2.10
          ... 
2002Q2    1.56
2002Q3    2.66
2002Q4    3.08
2003Q1    1.31
2003Q2    1.09
2003Q3    2.60
2003Q4    3.02
2004Q1    2.35
2004Q2    3.61
2004Q3    3.58
2004Q4    2.09
2005Q1    4.15
2005Q2    1.85
2005Q3    9.14
2005Q4    0.40
2006Q1    2.60
2006Q2    3.97
2006Q3   -1.58
2006Q4    3.30
2007Q1    4.58
2007Q2    2.75
2007Q3    3.45
2007Q4    6.38
2008Q1    2.82
2008Q2    8.53
2008Q3   -3.16
2008Q4   -8.79
2009Q1    0.94
2009Q2    3.37
2009Q3    3.56
Freq: Q-DEC, Name: infl, Length: 203, dtype: float64
>>> rng=pd.date_range('2000-01-01',periods=100,freq='D')
>>> ts=pd.Series(np.random.randn(len(rng)),index=rng)
		    
>>> ts
		    
2000-01-01    0.031958
2000-01-02   -0.743434
2000-01-03    0.599691
2000-01-04    0.209268
2000-01-05   -0.999434
2000-01-06    0.250968
2000-01-07   -0.305276
2000-01-08   -1.251385
2000-01-09   -1.247201
2000-01-10   -0.749595
2000-01-11   -0.377589
2000-01-12   -0.476567
2000-01-13   -1.788448
2000-01-14   -0.478038
2000-01-15   -0.173799
2000-01-16    2.471047
2000-01-17   -1.580995
2000-01-18   -0.879713
2000-01-19   -0.026499
2000-01-20   -1.014729
2000-01-21   -0.308902
2000-01-22    0.440084
2000-01-23   -1.337644
2000-01-24    0.235107
2000-01-25   -1.844507
2000-01-26    0.550035
2000-01-27    0.127860
2000-01-28   -0.541466
2000-01-29    0.665678
2000-01-30    0.473170
                ...   
2000-03-11   -0.156169
2000-03-12    0.456148
2000-03-13   -0.344784
2000-03-14   -0.168082
2000-03-15   -1.554388
2000-03-16    0.982637
2000-03-17    0.050312
2000-03-18   -0.827093
2000-03-19    0.372214
2000-03-20    0.219852
2000-03-21   -1.038562
2000-03-22   -1.791092
2000-03-23    1.043104
2000-03-24   -0.564979
2000-03-25    0.890776
2000-03-26    0.015863
2000-03-27   -0.712264
2000-03-28    0.140886
2000-03-29   -0.882682
2000-03-30    1.153463
2000-03-31   -0.109894
2000-04-01    0.806433
2000-04-02    0.731158
2000-04-03    0.704703
2000-04-04    0.301183
2000-04-05   -0.598848
2000-04-06    0.124836
2000-04-07    0.374150
2000-04-08   -0.041184
2000-04-09   -1.233005
Freq: D, Length: 100, dtype: float64
>>> ts.resample('M').mean()
		    
2000-01-31   -0.321556
2000-02-29   -0.067175
2000-03-31   -0.278044
2000-04-30    0.129936
Freq: M, dtype: float64
>>> ts.resample('M',kind='period').mean()
		    
2000-01   -0.321556
2000-02   -0.067175
2000-03   -0.278044
2000-04    0.129936
Freq: M, dtype: float64
>>> rng=pd.date_range('2000-01-01',periods=12,freq='T')
		    
>>> ts=pd.Series(np.arange(12),index=rng)
		    
>>> ts
		    
2000-01-01 00:00:00     0
2000-01-01 00:01:00     1
2000-01-01 00:02:00     2
2000-01-01 00:03:00     3
2000-01-01 00:04:00     4
2000-01-01 00:05:00     5
2000-01-01 00:06:00     6
2000-01-01 00:07:00     7
2000-01-01 00:08:00     8
2000-01-01 00:09:00     9
2000-01-01 00:10:00    10
2000-01-01 00:11:00    11
Freq: T, dtype: int32
>>> index=pd.PeriodIndex(year=data.year,quarter=data.quarter,freq='Q-DEC')
		    
>>> data.index=index
		    
>>> data.infl
		    
1959Q1    0.00
1959Q2    2.34
1959Q3    2.74
1959Q4    0.27
1960Q1    2.31
1960Q2    0.14
1960Q3    2.70
1960Q4    1.21
1961Q1   -0.40
1961Q2    1.47
1961Q3    0.80
1961Q4    0.80
1962Q1    2.26
1962Q2    0.13
1962Q3    2.11
1962Q4    0.79
1963Q1    0.53
1963Q2    2.75
1963Q3    0.78
1963Q4    2.46
1964Q1    0.13
1964Q2    0.90
1964Q3    1.29
1964Q4    2.05
1965Q1    1.28
1965Q2    2.54
1965Q3    0.89
1965Q4    2.90
1966Q1    4.99
1966Q2    2.10
          ... 
2002Q2    1.56
2002Q3    2.66
2002Q4    3.08
2003Q1    1.31
2003Q2    1.09
2003Q3    2.60
2003Q4    3.02
2004Q1    2.35
2004Q2    3.61
2004Q3    3.58
2004Q4    2.09
2005Q1    4.15
2005Q2    1.85
2005Q3    9.14
2005Q4    0.40
2006Q1    2.60
2006Q2    3.97
2006Q3   -1.58
2006Q4    3.30
2007Q1    4.58
2007Q2    2.75
2007Q3    3.45
2007Q4    6.38
2008Q1    2.82
2008Q2    8.53
2008Q3   -3.16
2008Q4   -8.79
2009Q1    0.94
2009Q2    3.37
2009Q3    3.56
Freq: Q-DEC, Name: infl, Length: 203, dtype: float64
>>> rng=pd.date_range('2000-01-01',periods=100,freq='D')
		    
>>> ts
		    
2000-01-31   -1.316304
2000-02-29   -2.121188
2000-03-31   -1.077233
Freq: M, dtype: float64
>>> ts=pd.Series(np.random.randn(len(rng)),index=rng)
		    
>>> ts
		    
2000-01-01    0.031958
2000-01-02   -0.743434
2000-01-03    0.599691
2000-01-04    0.209268
2000-01-05   -0.999434
2000-01-06    0.250968
2000-01-07   -0.305276
2000-01-08   -1.251385
2000-01-09   -1.247201
2000-01-10   -0.749595
2000-01-11   -0.377589
2000-01-12   -0.476567
2000-01-13   -1.788448
2000-01-14   -0.478038
2000-01-15   -0.173799
2000-01-16    2.471047
2000-01-17   -1.580995
2000-01-18   -0.879713
2000-01-19   -0.026499
2000-01-20   -1.014729
2000-01-21   -0.308902
2000-01-22    0.440084
2000-01-23   -1.337644
2000-01-24    0.235107
2000-01-25   -1.844507
2000-01-26    0.550035
2000-01-27    0.127860
2000-01-28   -0.541466
2000-01-29    0.665678
2000-01-30    0.473170
                ...   
2000-03-11   -0.156169
2000-03-12    0.456148
2000-03-13   -0.344784
2000-03-14   -0.168082
2000-03-15   -1.554388
2000-03-16    0.982637
2000-03-17    0.050312
2000-03-18   -0.827093
2000-03-19    0.372214
2000-03-20    0.219852
2000-03-21   -1.038562
2000-03-22   -1.791092
2000-03-23    1.043104
2000-03-24   -0.564979
2000-03-25    0.890776
2000-03-26    0.015863
2000-03-27   -0.712264
2000-03-28    0.140886
2000-03-29   -0.882682
2000-03-30    1.153463
2000-03-31   -0.109894
2000-04-01    0.806433
2000-04-02    0.731158
2000-04-03    0.704703
2000-04-04    0.301183
2000-04-05   -0.598848
2000-04-06    0.124836
2000-04-07    0.374150
2000-04-08   -0.041184
2000-04-09   -1.233005
Freq: D, Length: 100, dtype: float64
>>> ts.resample('M').mean()
		    
2000-01-31   -0.321556
2000-02-29   -0.067175
2000-03-31   -0.278044
2000-04-30    0.129936
Freq: M, dtype: float64
>>> ts.resample('M',kind='period').mean()
		    
2000-01   -0.321556
2000-02   -0.067175
2000-03   -0.278044
2000-04    0.129936
Freq: M, dtype: float64
>>> rng=pd.date_range('2000-01-01',periods=12,freq='T')
		    
>>> ts=pd.Series(np.arange(12),index=rng)
		    
>>> ts
		    
2000-01-01 00:00:00     0
2000-01-01 00:01:00     1
2000-01-01 00:02:00     2
2000-01-01 00:03:00     3
2000-01-01 00:04:00     4
2000-01-01 00:05:00     5
2000-01-01 00:06:00     6
2000-01-01 00:07:00     7
2000-01-01 00:08:00     8
2000-01-01 00:09:00     9
2000-01-01 00:10:00    10
2000-01-01 00:11:00    11
Freq: T, dtype: int32
>>> 
		    
>>> 
		    
>>> ts.resample('5min',closed='right').sum()
		    
1999-12-31 23:55:00     0
2000-01-01 00:00:00    15
2000-01-01 00:05:00    40
2000-01-01 00:10:00    11
Freq: 5T, dtype: int32
>>> ts.resample('5min',closed='right').sum()
		    
1999-12-31 23:55:00     0
2000-01-01 00:00:00    15
2000-01-01 00:05:00    40
2000-01-01 00:10:00    11
Freq: 5T, dtype: int32
>>> ts.resample('5min',closed='left').sum()
		    
2000-01-01 00:00:00    10
2000-01-01 00:05:00    35
2000-01-01 00:10:00    21
Freq: 5T, dtype: int32
>>> ts.resample('5min',closed='right',label='right').sum()
		    
2000-01-01 00:00:00     0
2000-01-01 00:05:00    15
2000-01-01 00:10:00    40
2000-01-01 00:15:00    11
Freq: 5T, dtype: int32
>>> ts.resample('5min',closed='right',label='right',loffset='-1s').sum()
		    
1999-12-31 23:59:59     0
2000-01-01 00:04:59    15
2000-01-01 00:09:59    40
2000-01-01 00:14:59    11
Freq: 5T, dtype: int32
>>> ts.resample('5min').ohlc()
		    
                     open  high  low  close
2000-01-01 00:00:00     0     4    0      4
2000-01-01 00:05:00     5     9    5      9
2000-01-01 00:10:00    10    11   10     11
>>> frame=pd.DataFrame(np.random.randn(2,4),
		       index=pd.date_range('1/1/2000',periods=2,freq='W-WED'),
		       columns=['Colorado','Texas','New York','Ohio'])
		    
>>> frame
		    
            Colorado     Texas  New York      Ohio
2000-01-05 -1.642055  0.800989 -0.683326  1.253570
2000-01-12 -0.269380  0.090123  0.923263 -1.026471
>>> df_daily=frame.resample('D').asfreq()
		    
>>> df_daily
		    
            Colorado     Texas  New York      Ohio
2000-01-05 -1.642055  0.800989 -0.683326  1.253570
2000-01-06       NaN       NaN       NaN       NaN
2000-01-07       NaN       NaN       NaN       NaN
2000-01-08       NaN       NaN       NaN       NaN
2000-01-09       NaN       NaN       NaN       NaN
2000-01-10       NaN       NaN       NaN       NaN
2000-01-11       NaN       NaN       NaN       NaN
2000-01-12 -0.269380  0.090123  0.923263 -1.026471
>>> frame.resample('D').ffill()
		    
            Colorado     Texas  New York      Ohio
2000-01-05 -1.642055  0.800989 -0.683326  1.253570
2000-01-06 -1.642055  0.800989 -0.683326  1.253570
2000-01-07 -1.642055  0.800989 -0.683326  1.253570
2000-01-08 -1.642055  0.800989 -0.683326  1.253570
2000-01-09 -1.642055  0.800989 -0.683326  1.253570
2000-01-10 -1.642055  0.800989 -0.683326  1.253570
2000-01-11 -1.642055  0.800989 -0.683326  1.253570
2000-01-12 -0.269380  0.090123  0.923263 -1.026471
>>> frame.resample('D').ffill(limit=2)
		    
            Colorado     Texas  New York      Ohio
2000-01-05 -1.642055  0.800989 -0.683326  1.253570
2000-01-06 -1.642055  0.800989 -0.683326  1.253570
2000-01-07 -1.642055  0.800989 -0.683326  1.253570
2000-01-08       NaN       NaN       NaN       NaN
2000-01-09       NaN       NaN       NaN       NaN
2000-01-10       NaN       NaN       NaN       NaN
2000-01-11       NaN       NaN       NaN       NaN
2000-01-12 -0.269380  0.090123  0.923263 -1.026471
>>> frame.resample('W-THU').ffill()
		    
            Colorado     Texas  New York      Ohio
2000-01-06 -1.642055  0.800989 -0.683326  1.253570
2000-01-13 -0.269380  0.090123  0.923263 -1.026471
>>> frame=pd.DataFrame(np.random.randn(24,4),
		       index=pd.period_range('1-2000','12-2001',freq='M'),
		       columns=['Colorado','Texas','New York','Ohio'])
		    
>>> frame[:5]
		    
         Colorado     Texas  New York      Ohio
2000-01 -0.770680  0.918281 -0.689922  1.785651
2000-02 -0.686465 -0.863891  0.138251  0.890009
2000-03  0.818115  1.705763  0.424998  0.052183
2000-04 -0.184111  0.366107  1.639526 -0.283371
2000-05 -1.623421  0.470094  0.472837  0.380518
>>> annual_frame=frame.resample('A-DEC').mean()
		    
>>> annual_frame
		    
      Colorado     Texas  New York      Ohio
2000  0.186439  0.456013 -0.223198  0.389208
2001  0.113392  0.259030 -0.026409 -0.125019
>>> annual_frame.resample('Q-DEC').ffill()
		    
        Colorado     Texas  New York      Ohio
2000Q1  0.186439  0.456013 -0.223198  0.389208
2000Q2  0.186439  0.456013 -0.223198  0.389208
2000Q3  0.186439  0.456013 -0.223198  0.389208
2000Q4  0.186439  0.456013 -0.223198  0.389208
2001Q1  0.113392  0.259030 -0.026409 -0.125019
2001Q2  0.113392  0.259030 -0.026409 -0.125019
2001Q3  0.113392  0.259030 -0.026409 -0.125019
2001Q4  0.113392  0.259030 -0.026409 -0.125019
>>> annual_frame.resample('Q-DEC',convention='end').ffill()
		    
        Colorado     Texas  New York      Ohio
2000Q4  0.186439  0.456013 -0.223198  0.389208
2001Q1  0.186439  0.456013 -0.223198  0.389208
2001Q2  0.186439  0.456013 -0.223198  0.389208
2001Q3  0.186439  0.456013 -0.223198  0.389208
2001Q4  0.113392  0.259030 -0.026409 -0.125019
>>> annual_frame.resample('Q-MAR').ffill()
		    
        Colorado     Texas  New York      Ohio
2000Q4  0.186439  0.456013 -0.223198  0.389208
2001Q1  0.186439  0.456013 -0.223198  0.389208
2001Q2  0.186439  0.456013 -0.223198  0.389208
2001Q3  0.186439  0.456013 -0.223198  0.389208
2001Q4  0.113392  0.259030 -0.026409 -0.125019
2002Q1  0.113392  0.259030 -0.026409 -0.125019
2002Q2  0.113392  0.259030 -0.026409 -0.125019
2002Q3  0.113392  0.259030 -0.026409 -0.125019
>>> file='D:\python\pra\stock_px_2.csv'
>>> close_px_all=pd.read_csv(file,parse_dates=True,index_col=0)
>>> close_px=close_px_all[['AAPL','MSFT','XOM']]
>>> close_px=close_px.resample('B').ffill()
>>> import matplotlib.pyplot as plt
>>> close_px.AAPL.plot()
<matplotlib.axes._subplots.AxesSubplot object at 0x0000000006964B38>
>>> close_px.AAPL.rolling(250).mean().plot()
<matplotlib.axes._subplots.AxesSubplot object at 0x0000000006964B38>
>>> plt.show()
>>> appl_std250=close_px.AAPL.rolling(250,min_periods=10).std()
>>> appl_std250[5:12]
2003-01-09         NaN
2003-01-10         NaN
2003-01-13         NaN
2003-01-14         NaN
2003-01-15    0.077496
2003-01-16    0.074760
2003-01-17    0.112368
Freq: B, Name: AAPL, dtype: float64
>>> appl_std250.plot()
<matplotlib.axes._subplots.AxesSubplot object at 0x0000000007078F28>
>>> plt.show()
>>> expanding_mean=appl_std250.expanding().mean()
>>> close_px.rolling(60).mean().plot(logy=True)
<matplotlib.axes._subplots.AxesSubplot object at 0x00000000072205F8>
>>> plt.show()
>>> close_px.rolling('20D').mean()
                  AAPL       MSFT        XOM
2003-01-02    7.400000  21.110000  29.220000
2003-01-03    7.425000  21.125000  29.230000
2003-01-06    7.433333  21.256667  29.473333
2003-01-07    7.432500  21.425000  29.342500
2003-01-08    7.402000  21.402000  29.240000
2003-01-09    7.391667  21.490000  29.273333
2003-01-10    7.387143  21.558571  29.238571
2003-01-13    7.378750  21.633750  29.197500
2003-01-14    7.370000  21.717778  29.194444
2003-01-15    7.355000  21.757000  29.152000
2003-01-16    7.350909  21.756364  29.129091
2003-01-17    7.325833  21.628333  29.085000
2003-01-20    7.304615  21.520000  29.047692
2003-01-21    7.283571  21.423571  28.968571
2003-01-22    7.250714  21.347143  28.851429
2003-01-23    7.225000  21.304286  28.728571
2003-01-24    7.203333  21.190000  28.608667
2003-01-27    7.160000  20.980000  28.316429
2003-01-28    7.160714  20.827857  28.178571
2003-01-29    7.170000  20.662143  28.067143
2003-01-30    7.155714  20.446429  27.948571
2003-01-31    7.157333  20.326667  27.960667
2003-02-03    7.147857  19.959286  27.846429
2003-02-04    7.153571  19.707857  27.828571
2003-02-05    7.147143  19.472143  27.772143
2003-02-06    7.159286  19.358571  27.720000
2003-02-07    7.153333  19.288000  27.716000
2003-02-10    7.172857  19.110714  27.647857
2003-02-11    7.190000  18.982857  27.654286
2003-02-12    7.197857  18.819286  27.625714
...                ...        ...        ...
2011-09-05  375.711429  25.276429  72.607857
2011-09-06  375.661429  25.295000  72.392857
2011-09-07  376.938571  25.390000  72.586429
2011-09-08  378.946429  25.545000  72.802143
2011-09-09  378.848667  25.558000  72.682667
2011-09-12  380.902143  25.754286  72.731429
2011-09-13  381.505000  25.835714  72.596429
2011-09-14  382.617857  25.973571  72.658571
2011-09-15  383.287857  26.097857  72.756429
2011-09-16  384.435333  26.166000  72.876000
2011-09-19  385.585714  26.259286  72.772143
2011-09-20  387.630000  26.286429  72.771429
2011-09-21  389.852143  26.270714  72.662857
2011-09-22  391.835714  26.217857  72.455714
2011-09-23  392.666667  26.140667  72.246000
2011-09-26  395.670000  26.160000  72.294286
2011-09-27  396.765000  26.136429  72.241429
2011-09-28  397.684286  26.090714  72.187857
2011-09-29  398.619286  26.070000  72.392857
2011-09-30  397.466000  25.991333  72.408667
2011-10-03  398.002143  25.890714  72.413571
2011-10-04  396.802143  25.807857  72.427143
2011-10-05  395.751429  25.729286  72.422857
2011-10-06  394.099286  25.673571  72.375714
2011-10-07  392.479333  25.712000  72.454667
2011-10-10  389.351429  25.602143  72.527857
2011-10-11  388.505000  25.674286  72.835000
2011-10-12  388.531429  25.810000  73.400714
2011-10-13  388.826429  25.961429  73.905000
2011-10-14  391.038000  26.048667  74.185333

[2292 rows x 3 columns]
>>> aapl_px=close_px.AAPL['2006':'2007']
>>> ma60=aapl_px.rolling(30,min_periods=20).mean()
>>> ewma60=aapl_px.ewm(span=30).mean()
>>> ma60.plot(style='k--',label='Simple MA')
<matplotlib.axes._subplots.AxesSubplot object at 0x000000000869CB00>
>>> ewma60.plot(style='k-',label='EW MA')
<matplotlib.axes._subplots.AxesSubplot object at 0x000000000869CB00>
>>> plt.legend()
<matplotlib.legend.Legend object at 0x0000000008A54048>
>>> plt.show()
>>> spx_px=close_px_all['SPX']
>>> spx_rets=spx_px.pct_change()
>>> returns=close_px.pct_change()
>>> corr=returns.AAPL.rolling(125,min_periods=100).corr(spx_rets)
>>> corr.plot()
<matplotlib.axes._subplots.AxesSubplot object at 0x0000000008E08898>
>>> plt.show()
>>> corr=returns.rolling(125,min_periods=100).corr(spx_rets)
>>> corr.plot()
<matplotlib.axes._subplots.AxesSubplot object at 0x0000000008A7C198>
>>> plt.show()
>>> from scipy.stats import percentileofscore
Traceback (most recent call last):
  File "<pyshell#200>", line 1, in <module>
    from scipy.stats import percentileofscore
ModuleNotFoundError: No module named 'scipy'




