>>> from pandas import Series,DataFrame
>>> import pandas as pd
>>> import numpy as np
>>> df=pd.DataFrame({'key1':['a','a','b','b','a'],
		     'key2':['one','two','one','two','one'],
		     'data1':np.random.randn(5),
		     'data2':np.random.randn(5)})
>>> df
  key1 key2     data1     data2
0    a  one  1.536150 -0.159347
1    a  two  1.145417  1.468526
2    b  one -0.649589 -0.960185
3    b  two  2.097288  0.153509
4    a  one -0.247084  1.503358
>>> grouped=df['data1'].groupby(df['key1'])
>>> grouped
<pandas.core.groupby.generic.SeriesGroupBy object at 0x0000000002FB8CF8>
>>> grouped.mean()
key1
a    0.811494
b    0.723849
Name: data1, dtype: float64
>>> means=df['data1'].groupby([df['key1'],df['key2']]).mean()
>>> means
key1  key2
a     one     0.644533
      two     1.145417
b     one    -0.649589
      two     2.097288
Name: data1, dtype: float64
>>> means.unstack()
key2       one       two
key1                    
a     0.644533  1.145417
b    -0.649589  2.097288
>>> states=np.array(['Ohio','California','California','Ohio','Ohio'])
>>> years=np.array([2005,2005,2006,2005,2006])
>>> df['data1'].groupby([states,years]).mean()
California  2005    1.145417
            2006   -0.649589
Ohio        2005    1.816719
            2006   -0.247084
Name: data1, dtype: float64
>>> df.groupby('key1').mean()
         data1     data2
key1                    
a     0.811494  0.937512
b     0.723849 -0.403338
>>> df.groupby(['key1','key2']).mean()
              data1     data2
key1 key2                    
a    one   0.644533  0.672005
     two   1.145417  1.468526
b    one  -0.649589 -0.960185
     two   2.097288  0.153509
>>> df.groupby(['key1','key2']).size()
key1  key2
a     one     2
      two     1
b     one     1
      two     1
dtype: int64
>>> for name,group in df.groupby('key1'):
	print(name)
	print(group)

a
  key1 key2     data1     data2
0    a  one  1.536150 -0.159347
1    a  two  1.145417  1.468526
4    a  one -0.247084  1.503358
b
  key1 key2     data1     data2
2    b  one -0.649589 -0.960185
3    b  two  2.097288  0.153509
>>> for (k1,k2),group in df.groupby(['key1','key2']):
	print((k1,k2))
	print(group)

	
('a', 'one')
  key1 key2     data1     data2
0    a  one  1.536150 -0.159347
4    a  one -0.247084  1.503358
('a', 'two')
  key1 key2     data1     data2
1    a  two  1.145417  1.468526
('b', 'one')
  key1 key2     data1     data2
2    b  one -0.649589 -0.960185
('b', 'two')
  key1 key2     data1     data2
3    b  two  2.097288  0.153509
>>> pieces=dict(list(df.groupby('key1')))
>>> pieces['b']
  key1 key2     data1     data2
2    b  one -0.649589 -0.960185
3    b  two  2.097288  0.153509
>>> #groupby默认在axis=0（行）上进行分组
>>> df.types
Traceback (most recent call last):
  File "<pyshell#32>", line 1, in <module>
    df.types
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\generic.py", line 5067, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'DataFrame' object has no attribute 'types'
>>> grouped=df.groupby(df.dtypes,axis=1)
>>> for dtype,group in grouped:
	print(dtype)
	print(group)

	
float64
      data1     data2
0  1.536150 -0.159347
1  1.145417  1.468526
2 -0.649589 -0.960185
3  2.097288  0.153509
4 -0.247084  1.503358
object
  key1 key2
0    a  one
1    a  two
2    b  one
3    b  two
4    a  one
>>> df.groupby('key1')['data1']
<pandas.core.groupby.generic.SeriesGroupBy object at 0x00000000055615C0>
>>> df.groupby('key1')[['data2']]
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000000005561208>
>>> df['data1'].groupby(df['key1'])		   
<pandas.core.groupby.generic.SeriesGroupBy object at 0x0000000002FB8C50>
<pandas.core.groupby.generic.SeriesGroupBy object at 0x0000000002FB8C50>
>>> df[['data2']].groupby(df['key1'])
			   
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000000005561198>
>>> df.groupby(['key1','key2'])[['data2']].mean()			   
              data2
key1 key2          
a    one   0.672005
     two   1.468526
b    one  -0.960185
     two   0.153509
>>> s_grouped=df.groupby(['key1','key2'])['data2']
>>> s_grouped
<pandas.core.groupby.generic.SeriesGroupBy object at 0x0000000005674780>
>>> s_grouped.mean()
			   
key1  key2
a     one     0.672005
      two     1.468526
b     one    -0.960185
      two     0.153509
Name: data2, dtype: float64
>>> people=pd.DataFrame(np.random.randn(5,5),columns=['a','b','c','d','e'],index=['Joe','Steve','Wes','Jim','Travis'])
			   
>>> people.iloc[2:3,[1,2]]=np.nan
			   
>>> people
			   
               a         b         c         d         e
Joe    -1.440956  0.483474 -0.310328 -1.137561 -1.312502
Steve  -0.587413 -0.590840 -0.161274 -0.498062  0.358051
Wes    -1.753277       NaN       NaN  0.048470  1.736482
Jim     0.746721  0.172708  0.798516  0.825998  1.177195
Travis -0.435557 -1.011992  0.107068 -0.240252  0.969837
>>> mapping={'a':'red','b':'red','c':'blue','d':'blue','e':'red','f':'orange'}
>>> by_column=people.groupby(mapping,axis=1)
			   
>>> by_column.sum()
			   
            blue       red
Joe    -1.447889 -2.269984
Steve  -0.659336 -0.820203
Wes     0.048470 -0.016795
Jim     1.624513  2.096625
Travis -0.133184 -0.477712
>>> map_series=pd.Series(mapping)
			   
>>> map_series
			   
a       red
b       red
c      blue
d      blue
e       red
f    orange
dtype: object
>>> people.groupby(map_series,axis=1).count()
			   
        blue  red
Joe        2    3
Steve      2    3
Wes        1    2
Jim        2    3
Travis     2    3
>>> people.groupby(len).sum()
			   
          a         b         c         d         e
3 -2.447512  0.656182  0.488188 -0.263094  1.601176
5 -0.587413 -0.590840 -0.161274 -0.498062  0.358051
6 -0.435557 -1.011992  0.107068 -0.240252  0.969837
>>> key_list=['one','one','one','two','two']
>>> people.groupby([len,key_list]).min()
		   
              a         b         c         d         e
3 one -1.753277  0.483474 -0.310328 -1.137561 -1.312502
  two  0.746721  0.172708  0.798516  0.825998  1.177195
5 one -0.587413 -0.590840 -0.161274 -0.498062  0.358051
6 two -0.435557 -1.011992  0.107068 -0.240252  0.969837
>>> columns=pd.MultiIndex.from_arrays([['US','US','US','JP','JP'],[1,3,5,1,3]],names=['cty','tenor'])
		   
>>> hier_df=pd.DataFrame(np.random.randn(4,5),columns=columns)
		   
>>> hier_df
		   
cty          US                            JP          
tenor         1         3         5         1         3
0     -0.403766  0.936847 -1.125547 -0.070928  1.382745
1     -0.140367 -0.675789 -2.260039  3.987206  0.365437
2      1.859973 -0.388325 -0.208550  1.520165  0.642543
3     -0.822489 -0.951763 -0.779612 -0.873974  1.118389
>>> hier_df.groupby(level='cty',axis=1).count()
		   
cty  JP  US
0     2   3
1     2   3
2     2   3
3     2   3
>>> df
		   
  key1 key2     data1     data2
0    a  one  1.536150 -0.159347
1    a  two  1.145417  1.468526
2    b  one -0.649589 -0.960185
3    b  two  2.097288  0.153509
4    a  one -0.247084  1.503358
>>> grouped=df.groupby('key1')
		   
>>> grouped['data1'].quantile(0.9)
		   
key1
a    1.458003
b    1.822600
Name: data1, dtype: float64
>>> def peak_to_peak(arr):
		   return arr.max()-arr.min()

		   
>>> grouped.agg(peak_to_peak)
		   
         data1     data2
key1                    
a     1.783234  1.662705
b     2.746877  1.113695
>>> grouped.describe()
		   
     data1                      ...     data2                    
     count      mean       std  ...       50%       75%       max
key1                            ...                              
a      3.0  0.811494  0.937341  ...  1.468526  1.485942  1.503358
b      2.0  0.723849  1.942335  ... -0.403338 -0.124914  0.153509

[2 rows x 16 columns]
>>> file='D:\python\pra\ex13.csv'
>>> tips=pd.read_csv(file)
		   
>>> tips['tip_pct']=tips['tip']/tips['total_bill']
		   
>>> tips[:6]
		   
   total_bill   tip smoker  day    time  size   tip_pct
0       16.99  1.01     No  Sun  Dinner     2  0.059447
1       10.34  1.66     No  Sun  Dinner     3  0.160542
2       21.01  3.50     No  Sun  Dinner     3  0.166587
3       23.68  3.31     No  Sun  Dinner     2  0.139780
4       24.59  3.61     No  Sun  Dinner     4  0.146808
5       25.29  4.71     No  Sun  Dinner     4  0.186240
>>> grouped=tips.groupby(['day','smoker'])
		   
>>> grouped_pct=grouped['tip_pct']
		   
>>> grouped_pct.agg('mean')
		   
day  smoker
Sun  No        0.143234
Name: tip_pct, dtype: float64











