>>> import numpy as np
>>> data = np.random.randn(2,3)
>>> data
array([[ 0.77276455, -1.02758857, -1.33887469],
       [-0.32256881,  0.56360693,  0.42530491]])
>>> data*10
array([[  7.7276455 , -10.27588568, -13.38874693],
       [ -3.22568809,   5.63606929,   4.25304909]])
>>> data+data
array([[ 1.5455291 , -2.05517714, -2.67774939],
       [-0.64513762,  1.12721386,  0.85060982]])
>>> data.shape
(2, 3)
>>> data.dtype
dtype('float64')
-------------------------------------------------------
>>> data1=[6,7.5,8,0,1]
>>> arr1=np.array(data1)
>>> arr1
array([6. , 7.5, 8. , 0. , 1. ])
>>> data2=[[1,2,3,4],[5,6,7,8]]
>>> arr2=np.array(data2)
>>> arr2
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])
>>> arr2.ndim
2
>>> arr2.shape
(2, 4)
>>> arr1.dtype
dtype('float64')
>>> arr2.dtype
dtype('int32')
>>> np.zeros(10)
array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
>>> np.zeros((3,6))
array([[0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0.]])
>>> np.empty((2,3,2))
array([[[8.82769181e+025, 7.36662981e+228],
        [7.54894003e+252, 2.95479883e+137],
        [1.42800637e+248, 2.64686750e+180]],

       [[1.09936856e+248, 6.99481925e+228],
        [7.54894003e+252, 7.67109635e+170],
        [2.64686750e+180, 5.63234836e-322]]])
>>> np.arange(15)
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])        
        -----------------------------------------------------
>>> arr1=np.array([1,2,3],dtype=np.float64)
>>> arr2=np.array([1,2,3],dtype=np.int32)
>>> arr1.dtype
dtype('float64')
>>> arr2.dtype
dtype('int32')
>>> arr=np.array([3.7,-1.2,-2.6,0.5,12.9,10.1])
>>> arr
array([ 3.7, -1.2, -2.6,  0.5, 12.9, 10.1])
>>> arr.astype(np.int32)
array([ 3, -1, -2,  0, 12, 10])
>>> numeric_strings=np.array(['1.25','-9.6','42'],dtype=np.string_)
>>> numeric_strings.astype(float)
array([ 1.25, -9.6 , 42.  ])
>>> int_array=np.arange(10)
>>> calibers=np.array([.22,.270,.357,.380,.44,.50],dtype=np.float64)
>>> int_array.astype(calibers.dtype)
array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])
>>> empty_unit32=np.empty(8,dtype='u4')
>>> empty_unit32
array([1, 2, 3, 4, 5, 6, 7, 8], dtype=uint32)
{我觉得这一段好奇怪，就是u4这一段，和书上答案不一样}
---------------------------------------------------------------
>>> arr=np.array([[1.,2.,3.],[4.,5.,6.]])
>>> arr
array([[1., 2., 3.],
       [4., 5., 6.]])
>>> arr*arr
array([[ 1.,  4.,  9.],
       [16., 25., 36.]])
>>> arr-arr
array([[0., 0., 0.],
       [0., 0., 0.]])
>>> 1/arr
array([[1.        , 0.5       , 0.33333333],
       [0.25      , 0.2       , 0.16666667]])
>>> arr**.5
array([[1.        , 1.41421356, 1.73205081],
       [2.        , 2.23606798, 2.44948974]])
>>> arr2=np.array([[0.,4.,1.],[7.,2.,12.]])
>>> arr2
array([[ 0.,  4.,  1.],
       [ 7.,  2., 12.]])
>>> arr2>arr
array([[False,  True, False],
       [ True, False,  True]])
-------------------------------------------------------------
>>> arr=np.array([[1.,2.,3.],[4.,5.,6.]])
>>> arr
array([[1., 2., 3.],
       [4., 5., 6.]])
>>> arr*arr
array([[ 1.,  4.,  9.],
       [16., 25., 36.]])
>>> arr-arr
array([[0., 0., 0.],
       [0., 0., 0.]])
>>> 1/arr
array([[1.        , 0.5       , 0.33333333],
       [0.25      , 0.2       , 0.16666667]])
>>> arr**.5
array([[1.        , 1.41421356, 1.73205081],
       [2.        , 2.23606798, 2.44948974]])
>>> arr2=np.array([[0.,4.,1.],[7.,2.,12.]])
>>> arr2
array([[ 0.,  4.,  1.],
       [ 7.,  2., 12.]])
>>> arr2>arr
array([[False,  True, False],
       [ True, False,  True]])
>>> arr=np.arange(10)
>>> arr
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> arr[5]
5
>>> arr[5:8]
array([5, 6, 7])
>>> arr[5:8]=12
>>> arr
array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])
>>> arr_slice=arr[5:8]
>>> arr_slice
array([12, 12, 12])
>>> arr_slice[1]=12345
>>> arr
array([    0,     1,     2,     3,     4,    12, 12345,    12,     8,
           9])
>>> arr_slice[:]=64
>>> arr
array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])
>>> arr2d=np.array([[1,2,3],[4,5,6],[7,8,9]])
>>> arr2d[2]
array([7, 8, 9])
>>> arr2d[0][2]
3
>>> arr2d[0,2]
3
>>> arr3d=np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]])
>>> arr3d
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])
>>> arr3d[0]
array([[1, 2, 3],
       [4, 5, 6]])
>>> old_values=arr3d[0].copy()
>>> arr3d[0]=42
>>> arr3d
array([[[42, 42, 42],
        [42, 42, 42]],

       [[ 7,  8,  9],
        [10, 11, 12]]])
>>> arr3d[0]=old_values
>>> arr3d
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])
>>> arr3d[1,0]
array([7, 8, 9])
>>> x=arr3d[1]
>>> x
array([[ 7,  8,  9],
       [10, 11, 12]])
>>> x[0]
array([7, 8, 9])
>>> arr
array([ 0,  1,  2,  3,  4, 64, 64, 64,  8,  9])
>>> arr[1:6]
array([ 1,  2,  3,  4, 64])
>>> arr2d
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
>>> arr2d[:2]
array([[1, 2, 3],
       [4, 5, 6]])
>>> arr2d[:2,1:]
array([[2, 3],
       [5, 6]])
>>> arr2d[1,:2]
array([4, 5])
>>> arr2d[:2,2]
array([3, 6])
>>> arr2d[:,:1]
array([[1],
       [4],
       [7]])
>>> arr2d[:2,1:]=0
>>> arr2d
array([[1, 0, 0],
       [4, 0, 0],
       [7, 8, 9]])
-------------------------------------------------------------
>>> names=np.array(['Bob','Joe','Will','Bob','Joe','joe'])
>>> data=np.random.randn(7,4)
>>> names
array(['Bob', 'Joe', 'Will', 'Bob', 'Joe', 'joe'], dtype='<U4')
>>> data
array([[ 1.25138562, -0.77977841,  1.97587885,  0.51635208],
       [-1.93150052,  1.8094897 ,  1.53909409,  0.72539575],
       [ 1.13890585,  0.28391611, -0.56513837, -0.62439283],
       [-0.69760148,  0.33626942,  1.07999773,  0.44466534],
       [ 2.3610991 ,  0.7328195 , -0.82391522, -1.64215598],
       [ 1.32522539, -0.62881327, -0.61519889, -0.26910543],
       [ 0.70777684,  0.88962986, -0.97880987,  1.75118649]])
>>> names=='Bob'
array([ True, False, False,  True, False, False])
>>> data[names=='Bob']
>>> arr=np.empty((8,4))
>>> arr=np.empty((8,4))
>>> for i in range(8):
	arr[i]=i

>>> arr
array([[0., 0., 0., 0.],
       [1., 1., 1., 1.],
       [2., 2., 2., 2.],
       [3., 3., 3., 3.],
       [4., 4., 4., 4.],
       [5., 5., 5., 5.],
       [6., 6., 6., 6.],
       [7., 7., 7., 7.]])
>>> arr[[4,3,0,6]]
array([[4., 4., 4., 4.],
       [3., 3., 3., 3.],
       [0., 0., 0., 0.],
       [6., 6., 6., 6.]])
>>> arr[[-3,-5,-7]]
array([[5., 5., 5., 5.],
       [3., 3., 3., 3.],
       [1., 1., 1., 1.]])
>>> arr=np.arange(32).reshape((8,4))
>>> arr
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23],
       [24, 25, 26, 27],
       [28, 29, 30, 31]])
>>> arr[[1,5,7,2],[0,3,1,2]]
array([ 4, 23, 29, 10])
>>> arr[[1,5,7,2]][:,[0,3,1,2]]
array([[ 4,  7,  5,  6],
       [20, 23, 21, 22],
       [28, 31, 29, 30],
       [ 8, 11,  9, 10]])
>>> arr=np.arange(15).reshape((3,5))
>>> arr
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
>>> arr.T
array([[ 0,  5, 10],
       [ 1,  6, 11],
       [ 2,  7, 12],
       [ 3,  8, 13],
       [ 4,  9, 14]])
>>> arr=np.random.randn(6,3)
>>> arr
array([[ 0.42166455,  2.35808964,  0.38520141],
       [-0.79001199,  1.06435474,  0.44091825],
       [ 0.75633342, -0.07390607, -2.62621128],
       [-1.8387524 ,  0.60193837,  0.16500488],
       [ 1.17812931, -1.0257193 ,  1.01299598],
       [-1.24282396,  0.77815937,  0.39375326]])
>>> np.dot(arr.T,arr)
array([[ 7.68757063, -3.18478855, -1.77152513],
       [-3.18478855,  8.71886178,  0.93840187],
       [-1.77152513,  0.93840187,  8.44820383]])
>>> arr=np.arange(16).reshape((2,2,4))
>>> arr
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])
>>> arr.transpose((1,0,2))
array([[[ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[ 4,  5,  6,  7],
        [12, 13, 14, 15]]])
>>> arr.swapaxes(1,2)
array([[[ 0,  4],
        [ 1,  5],
        [ 2,  6],
        [ 3,  7]],

       [[ 8, 12],
        [ 9, 13],
        [10, 14],
        [11, 15]]])
 ----------------------------------------
 >>> arr=np.arange(10)
>>> arr
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>>  np.sqrt(arr)
SyntaxError: unexpected indent
>>> np.sqrt(arr)
array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,
       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])
>>> np.exp(arr)
array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,
       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,
       2.98095799e+03, 8.10308393e+03])
>>> x=np.random.randn(8)
>>> y=np.random.randn(8)
>>> x
array([-0.43369282,  1.81747641, -0.67265564, -0.00803705,  0.95456533,
       -0.6469812 , -1.89020485, -0.82928141])
>>> y
array([ 0.86623476,  0.82431188, -0.40780863, -1.67197225,  0.794288  ,
       -0.31878816,  0.84881341, -0.90339201])
>>> np.maximum(x,y)
array([ 0.86623476,  1.81747641, -0.40780863, -0.00803705,  0.95456533,
       -0.31878816,  0.84881341, -0.82928141])
>>> arr=np.random.randn(7)*5
>>> arr
array([ 4.28255769, -1.48006967, -3.74113433, -9.70671944, -5.72723035,
        1.33109388, -2.7760296 ])
>>> remainder,whole_part=np.modf(arr)
>>> remainder
array([ 0.28255769, -0.48006967, -0.74113433, -0.70671944, -0.72723035,
        0.33109388, -0.7760296 ])
>>> whole_part
array([ 4., -1., -3., -9., -5.,  1., -2.])
>>> arr
array([ 4.28255769, -1.48006967, -3.74113433, -9.70671944, -5.72723035,
        1.33109388, -2.7760296 ])
>>> np.sqrt(arr)

Warning (from warnings module):
  File "__main__", line 1
RuntimeWarning: invalid value encountered in sqrt
array([2.06943415,        nan,        nan,        nan,        nan,
       1.15373042,        nan])
>>>  np.sqrt(arr,arr)
SyntaxError: unexpected indent
>>> np.sqrt(arr,arr)
array([2.06943415,        nan,        nan,        nan,        nan,
       1.15373042,        nan])
>>> arr
array([2.06943415,        nan,        nan,        nan,        nan,
       1.15373042,        nan])
---------------------------------------------------------
>>> points=np.arange(-5,5,0.01)
>>> xs,ys=np.meshgrid(points,points)
>>> ys
array([[-5.  , -5.  , -5.  , ..., -5.  , -5.  , -5.  ],
       [-4.99, -4.99, -4.99, ..., -4.99, -4.99, -4.99],
       [-4.98, -4.98, -4.98, ..., -4.98, -4.98, -4.98],
       ...,
       [ 4.97,  4.97,  4.97, ...,  4.97,  4.97,  4.97],
       [ 4.98,  4.98,  4.98, ...,  4.98,  4.98,  4.98],
       [ 4.99,  4.99,  4.99, ...,  4.99,  4.99,  4.99]])
>>> z=np.sqrt(xs**2+ys**2)
>>> z
array([[7.07106781, 7.06400028, 7.05693985, ..., 7.04988652, 7.05693985,
        7.06400028],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       ...,
       [7.04988652, 7.04279774, 7.03571603, ..., 7.0286414 , 7.03571603,
        7.04279774],
       [7.05693985, 7.04985815, 7.04278354, ..., 7.03571603, 7.04278354,
        7.04985815],
       [7.06400028, 7.05692568, 7.04985815, ..., 7.04279774, 7.04985815,
        7.05692568]])
>>> xarr=np.array([1.1,1.2,1.3,1.4,1.5])
>>> yarr=np.array([2.1,2.2,2.3,2.4,2.5])
>>> cond=np.array([True,False,True,True,False])
>>> result=[(x if c else y) for x,y,c in zip(xarr,yarr,cond)]
>>> result
[1.1, 2.2, 1.3, 1.4, 2.5]
>>> result=np.where(cond,xarr,yarr)
>>> result
array([1.1, 2.2, 1.3, 1.4, 2.5])
>>> arr=np.random.randn(4,4)
>>> arr
array([[ 2.22508779,  0.06951791, -0.26899995, -0.59385815],
       [ 1.83802557,  1.82685654,  1.35768366,  1.08188988],
       [ 1.80756957,  0.66372007, -1.29935731,  1.3526034 ],
       [ 0.61384312, -1.23033635, -0.00768134, -0.70074726]])
>>> arr>0
array([[ True,  True, False, False],
       [ True,  True,  True,  True],
       [ True,  True, False,  True],
       [ True, False, False, False]])
>>> np.where(arr>0,2,-2)
array([[ 2,  2, -2, -2],
       [ 2,  2,  2,  2],
       [ 2,  2, -2,  2],
       [ 2, -2, -2, -2]])
>>> np.where(arr>0,2,arr)
array([[ 2.        ,  2.        , -0.26899995, -0.59385815],
       [ 2.        ,  2.        ,  2.        ,  2.        ],
       [ 2.        ,  2.        , -1.29935731,  2.        ],
       [ 2.        , -1.23033635, -0.00768134, -0.70074726]])
---------------------------------------------------------------
>>> arr>0
array([[ True,  True, False, False],
       [ True,  True,  True,  True],
       [ True,  True, False,  True],
       [ True, False, False, False]])
>>> np.where(arr>0,2,-2)
array([[ 2,  2, -2, -2],
       [ 2,  2,  2,  2],
       [ 2,  2, -2,  2],
       [ 2, -2, -2, -2]])
>>> np.where(arr>0,2,arr)
array([[ 2.        ,  2.        , -0.26899995, -0.59385815],
       [ 2.        ,  2.        ,  2.        ,  2.        ],
       [ 2.        ,  2.        , -1.29935731,  2.        ],
       [ 2.        , -1.23033635, -0.00768134, -0.70074726]])
>>> arr=np.random.randn(5,4)
>>> arr
array([[-1.25224118,  2.95229816, -0.81036278,  1.12894538],
       [ 2.07931758,  1.27198872, -1.20414946,  0.40825812],
       [-1.05695067, -0.23283196, -1.59025319, -2.26281779],
       [-0.47676332,  0.17831472,  1.92834395, -0.41253884],
       [-0.07886377,  0.44465516,  0.22313561,  2.0331699 ]])
>>> arr.mean()
0.16353271805047725
>>> np.mean(arr)
0.16353271805047725
>>> arr.sum()
3.2706543610095453
>>> arr.mean(axis=1)
array([ 0.5046599 ,  0.63885374, -1.2857134 ,  0.30433913,  0.65552422])
>>> arr.sum(axis=0)
array([-0.78550136,  4.61442481, -1.45328587,  0.89501678])
>>> arr=np.array([0,1,2,3,4,5,6,7])
>>> arr.cumsum()
array([ 0,  1,  3,  6, 10, 15, 21, 28], dtype=int32)
>>> arr=np.array([[0,1,2],[3,4,5],[6,7,8])
		 
SyntaxError: invalid syntax
>>> arr=np.array([[0,1,2],[3,4,5],[6,7,8]])
		 
>>> arr
		 
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
>>> arr.cumsum(axis=0)
		 
array([[ 0,  1,  2],
       [ 3,  5,  7],
       [ 9, 12, 15]], dtype=int32)
>>> arr.cumsum(axis=1)
		 
array([[ 0,  1,  3],
       [ 3,  7, 12],
       [ 6, 13, 21]], dtype=int32)
>>> arr=np.random.randn(100)
		 
>>> (arr>0).sum()
		 
49
>>> bools=np.array([False,False,True,False])
		 
>>> bools.any()
		 
True
>>> bools.all()
		 
False
>>> arr=np.random.randn(6)
		 
>>> arr
		 
array([-0.12617534,  0.21582441,  0.6048618 , -1.14532847,  1.41342963,
       -0.4978451 ])
>>> arr.sort()
		 
>>> arr
		 
array([-1.14532847, -0.4978451 , -0.12617534,  0.21582441,  0.6048618 ,
        1.41342963])
>>> arr=np.random.randn(5,3)
		 
>>> arr
		 
array([[ 0.13891051,  0.60375972, -0.42619202],
       [ 0.51064063,  0.85296526, -0.8465439 ],
       [-2.0903518 , -1.20132401,  1.17409197],
       [ 1.54322529,  0.53616573, -0.74285608],
       [-0.51107633, -1.16338929,  1.19291481]])
>>> arr.sort(1)
		 
>>> arr
		 
array([[-0.42619202,  0.13891051,  0.60375972],
       [-0.8465439 ,  0.51064063,  0.85296526],
       [-2.0903518 , -1.20132401,  1.17409197],
       [-0.74285608,  0.53616573,  1.54322529],
       [-1.16338929, -0.51107633,  1.19291481]])
>>> large_arr=np.random.randn(1000)
		 
>>> large_arr.sort()
		 
>>> large_arr[int(0.05*len(large_arr))]
		 
-1.5990089444617197
>>> names=np.array(['Bob','Joe','Will','Bob','Joe','Joe'])
		 
>>> np.unique(names)
		 
array(['Bob', 'Joe', 'Will'], dtype='<U4')
>>> ints=np.array([3,3,3,2,2,1,1,4,4])
		 
>>> np.unique(ints)
		 
array([1, 2, 3, 4])
>>> sorted(set(names))
		 
['Bob', 'Joe', 'Will']
>>> values=np.array([6,0,0,3,2,5,6])
>>> np.in1d(values,[2,3,6])
		 
array([ True, False, False,  True,  True, False,  True])
>>> arr=np.arange(10)
		 
>>> np.save('some_array',arr)
		 
>>> np.load('some_array.npy')
		 
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> np.savez('array_archive.npz',a=arr,b=arr)
		 
>>> arch=np.load('array_archive.npz')
		 
>>> arch['b']
		 
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> x=np.array([[1.,2.,3.],[4.,5.,6.]])
		 
>>> y=np.array([[6.,23.],[-1,7],[8,9]])
		 
>>> x
		 
array([[1., 2., 3.],
       [4., 5., 6.]])
>>> y
		 
array([[ 6., 23.],
       [-1.,  7.],
       [ 8.,  9.]])
>>> x.dot(y)
		 
array([[ 28.,  64.],
       [ 67., 181.]])
>>> np.dot(x,y)
		 
array([[ 28.,  64.],
       [ 67., 181.]])
>>> np.dot(x,np.ones(3))
		 
array([ 6., 15.])
>>> x@np.ones(3)
		 
array([ 6., 15.])
>>> from numpy.linalg import inv,qr

>>> X=np.random.randn(5,5)
		 
>>> mat=X.T.dot(x)
		 
>>> inv(mat)
		 
array([[-0.13841832, -0.33294896,  0.94995348,  0.28410442,  0.75129732],
       [ 0.19960379,  0.04483041,  1.66733668,  0.12211459,  1.45549656],
       [-0.40140725, -0.71056475, -2.38608832, -0.19152429, -1.93017821],
       [ 0.30962148,  1.15092429,  6.47921386,  0.53553488,  5.09797484],
       [ 1.37921737,  1.18880537,  5.65278018,  0.17877944,  4.55641187]])
>>> mat.dot(inv(mat))
		 
array([[ 1.00000000e+00, -4.44089210e-16,  0.00000000e+00,
        -8.32667268e-17,  0.00000000e+00],
       [-1.11022302e-16,  1.00000000e+00, -4.44089210e-16,
         0.00000000e+00, -8.88178420e-16],
       [-4.44089210e-16, -4.44089210e-16,  1.00000000e+00,
        -5.55111512e-17, -1.77635684e-15],
       [ 1.11022302e-16, -2.22044605e-16, -4.44089210e-16,
         1.00000000e+00, -4.44089210e-16],
       [ 4.44089210e-16, -4.44089210e-16, -1.77635684e-15,
        -2.77555756e-16,  1.00000000e+00]])
>>> q,r=qr(mat)
		 
>>> r
		 
array([[-5.14213639,  6.60849728,  1.48677755,  0.78752918, -1.41512432],
       [ 0.        ,  6.62367392, -6.9298103 , -2.24584575, -2.39643705],
       [ 0.        ,  0.        , -4.10446316, -0.55301849, -1.12718347],
       [ 0.        ,  0.        ,  0.        , -0.77313113,  0.85149986],
       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.13355638]])
---------------------------------------------------------------------------
>>> np.random.seed(1234)
		 
>>> rng=np.random.RandomState(1234)
		 
>>> rng.randn(10)
		 
array([ 0.47143516, -1.19097569,  1.43270697, -0.3126519 , -0.72058873,
        0.88716294,  0.85958841, -0.6365235 ,  0.01569637, -2.24268495])
-------------------------------------------------------------------------------
>>> import random
		 
>>> position=0
		 
>>> walk=[position]
		 
>>> steps=1000
		 
>>> for i in range(steps):
		 step=1 if random.randint(0,1) else -1
		 position += step
		 walk.append(position)

		
>>> plt.plot(walk[:100])
		 
Traceback (most recent call last):
  File "<pyshell#139>", line 1, in <module>
    plt.plot(walk[:100])
NameError: name 'plt' is not defined
>>> p1t.plot(walk[:100])
		 
Traceback (most recent call last):
  File "<pyshell#140>", line 1, in <module>
    p1t.plot(walk[:100])
NameError: name 'p1t' is not defined
>>> nsteps=1000
		 
>>> draws=np.random.randit90,2,size=nsteps)
SyntaxError: invalid syntax
>>> draws=np.random.randit(0,2,size=nsteps)
Traceback (most recent call last):
  File "<pyshell#143>", line 1, in <module>
    draws=np.random.randit(0,2,size=nsteps)
AttributeError: module 'numpy.random' has no attribute 'randit'
>>> draws=np.random.randint(0,2,size=nsteps)
>>> steps=np.where(draws>0,1,-1)
>>> walk=steps.cumsum()
>>> walk.min()
-9
>>> walk.max()
60
>>> (np.abs(walk))>=10).argmax()
SyntaxError: invalid syntax
>>> (np.abs(walk)>=10).argmax()
297
>>> nwalks=5000
>>> nsteps=1000
>>> draws=np.random.randint(0,2,size=(nwalks,nsteps))
>>> steps=np.where(draws>0,1,-1)
>>> walks=steps.cumsum(1)
>>> walks
array([[  1,   2,   3, ...,  46,  47,  46],
       [  1,   0,   1, ...,  40,  41,  42],
       [  1,   2,   3, ..., -26, -27, -28],
       ...,
       [  1,   0,   1, ...,  64,  65,  66],
       [  1,   2,   1, ...,   2,   1,   0],
       [ -1,  -2,  -3, ...,  32,  33,  34]], dtype=int32)
>>> walks.max()
122
>>> walks.min()
-128
