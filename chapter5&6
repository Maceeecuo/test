>>> from pandas import Series, DataFrame
>>> import pandas as pd
>>> obj=Series([4,7,-5,3])
>>> obj
0    4
1    7
2   -5
3    3
dtype: int64
>>> obj.values
array([ 4,  7, -5,  3], dtype=int64)
>>> obj.index
RangeIndex(start=0, stop=4, step=1)
>>> obj2=Series([4,7,-5,3], index=['d','b','a','c'])
>>> obj2
d    4
b    7
a   -5
c    3
dtype: int64
>>> obj2.index
Index(['d', 'b', 'a', 'c'], dtype='object')
>>> obj2['a']
-5
>>> obj2['d']=6
>>> obj2[['c','a','d']]
c    3
a   -5
d    6
dtype: int64
>>> obj2
d    6
b    7
a   -5
c    3
dtype: int64
>>> obj2[obj2>0]
d    6
b    7
c    3
dtype: int64
>>> obj2*2
d    12
b    14
a   -10
c     6
dtype: int64
>>> import numpy as np
>>> np.exp(obj2)
d     403.428793
b    1096.633158
a       0.006738
c      20.085537
dtype: float64
>>> 'b' in obj2
True
>>> 'e' in obj2
False
>>> sdata={'Ohio':35000,'Texas':71000,'Oregon':16000,'Utah':5000}
>>> obj3=Series(sdata)
>>> obj3
Ohio      35000
Texas     71000
Oregon    16000
Utah       5000
dtype: int64
>>> states=['California','Ohio','Oregon','Texas']
>>> obj4=Series(sdata,index=states)
>>> obj4
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
dtype: float64
>>> #在这个例子中，sdata中跟states索引相匹配的那三个值会被找出来放到相应的位置上
>>> pd.isnull(obj4)
California     True
Ohio          False
Oregon        False
Texas         False
dtype: bool
>>> pd.notnull(obj4)
California    False
Ohio           True
Oregon         True
Texas          True
dtype: bool
>>> obj4.isnull()
California     True
Ohio          False
Oregon        False
Texas         False
dtype: bool
>>> obj3
Ohio      35000
Texas     71000
Oregon    16000
Utah       5000
dtype: int64
>>> obj4
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
dtype: float64
>>> obj3+obj4
California         NaN
Ohio           70000.0
Oregon         32000.0
Texas         142000.0
Utah               NaN
dtype: float64
>>> obj4.name='population'
>>> obj4.index.name='state'
>>> obj4
state
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
Name: population, dtype: float64
>>> obj.index=['Bob','Steve','Jeff','Ryan']
>>> obj
Bob      4
Steve    7
Jeff    -5
Ryan     3
dtype: int64
------------------------------------------------------------------------------DataFrame
>>> data={'state':['Ohio','Ohio','Ohio','Nevada','Nevada'],'year':[2000,2001,2002,2001,200.],'pop':[1.5,1.7,3.6,2.4,2.9]}
>>> frame=DataFrame(data)
>>> frame
    state    year  pop
0    Ohio  2000.0  1.5
1    Ohio  2001.0  1.7
2    Ohio  2002.0  3.6
3  Nevada  2001.0  2.4
4  Nevada   200.0  2.9
>>> DataFrame(data,columns=['year','state','pop'])
     year   state  pop
0  2000.0    Ohio  1.5
1  2001.0    Ohio  1.7
2  2002.0    Ohio  3.6
3  2001.0  Nevada  2.4
4   200.0  Nevada  2.9
>>> frame2=DataFrame(data,columns=['year','state','pop','debt'],index=['one','two','three','four','five'])
>>> frame2
         year   state  pop debt
one    2000.0    Ohio  1.5  NaN
two    2001.0    Ohio  1.7  NaN
three  2002.0    Ohio  3.6  NaN
four   2001.0  Nevada  2.4  NaN
five    200.0  Nevada  2.9  NaN
>>> frame2.columns
Index(['year', 'state', 'pop', 'debt'], dtype='object')
>>> frame2['state']
one        Ohio
two        Ohio
three      Ohio
four     Nevada
five     Nevada
Name: state, dtype: object
>>> frame2.year
one      2000.0
two      2001.0
three    2002.0
four     2001.0
five      200.0
Name: year, dtype: float64
>>> frame2.ix['three']
year     2002
state    Ohio
pop       3.6
debt      NaN
Name: three, dtype: object
>>> frame2['debt']=16.5
>>> frame2
         year   state  pop  debt
one    2000.0    Ohio  1.5  16.5
two    2001.0    Ohio  1.7  16.5
three  2002.0    Ohio  3.6  16.5
four   2001.0  Nevada  2.4  16.5
five    200.0  Nevada  2.9  16.5
>>> frame2['debt']=np.arange(5.)
>>> frame2
         year   state  pop  debt
one    2000.0    Ohio  1.5   0.0
two    2001.0    Ohio  1.7   1.0
three  2002.0    Ohio  3.6   2.0
four   2001.0  Nevada  2.4   3.0
five    200.0  Nevada  2.9   4.0
>>> val=Series([-1.2,-1.5,-1.7],index=['two','four','five'])
>>> frame2['debt']=val
>>> frame2
         year   state  pop  debt
one    2000.0    Ohio  1.5   NaN
two    2001.0    Ohio  1.7  -1.2
three  2002.0    Ohio  3.6   NaN
four   2001.0  Nevada  2.4  -1.5
five    200.0  Nevada  2.9  -1.7
>>> frame2['estern']=frame2.state=='Ohio'
	   
>>> frame2
	   
         year   state  pop  debt  estern
one    2000.0    Ohio  1.5   NaN    True
two    2001.0    Ohio  1.7  -1.2    True
three  2002.0    Ohio  3.6   NaN    True
four   2001.0  Nevada  2.4  -1.5   False
five    200.0  Nevada  2.9  -1.7   False
>>> #为不存在的列赋值会创建出一个新列，关键字del用于删除列
	   
>>> del frame2['estern']
	   
>>> frame2.columns
	   
Index(['year', 'state', 'pop', 'debt'], dtype='object')
>>> pop={'Nevada':{2001:2.4,2002:2.9},'Ohio':{2000:1.5,2001:3.6}}
	   
>>> frame3=DataFrame(pop)
	   
>>> frame3
	   
      Nevada  Ohio
2000     NaN   1.5
2001     2.4   3.6
2002     2.9   NaN
>>> frame3.T
	   
        2000  2001  2002
Nevada   NaN   2.4   2.9
Ohio     1.5   3.6   NaN
>>> DataFrame(pop,index=[2001,2002,2003])
	   
      Nevada  Ohio
2001     2.4   3.6
2002     2.9   NaN
2003     NaN   NaN
>>> pdata={'Ohio':frame3['Ohio'][:-1],'Nevada':frame3['Nevada'][:2]}
	   
>>> DataFrame(pdata)
	   
      Ohio  Nevada
2000   1.5     NaN
2001   3.6     2.4
>>> frame3.index.name='year';frame3.columns.name='state'
	   
>>> frame3
	   
state  Nevada  Ohio
year               
2000      NaN   1.5
2001      2.4   3.6
2002      2.9   NaN
	   
array([[nan, 1.5],
       [2.4, 3.6],
       [2.9, nan]])
>>> frame2.values
	   
array([[2000.0, 'Ohio', 1.5, nan],
       [2001.0, 'Ohio', 1.7, -1.2],
       [2002.0, 'Ohio', 3.6, nan],
       [2001.0, 'Nevada', 2.4, -1.5],
       [200.0, 'Nevada', 2.9, -1.7]], dtype=object)
