>>> from pandas import Series, DataFrame
>>> import pandas as pd
>>> obj=Series([4,7,-5,3])
>>> obj
0    4
1    7
2   -5
3    3
dtype: int64
>>> obj.values
array([ 4,  7, -5,  3], dtype=int64)
>>> obj.index
RangeIndex(start=0, stop=4, step=1)
>>> obj2=Series([4,7,-5,3], index=['d','b','a','c'])
>>> obj2
d    4
b    7
a   -5
c    3
dtype: int64
>>> obj2.index
Index(['d', 'b', 'a', 'c'], dtype='object')
>>> obj2['a']
-5
>>> obj2['d']=6
>>> obj2[['c','a','d']]
c    3
a   -5
d    6
dtype: int64
>>> obj2
d    6
b    7
a   -5
c    3
dtype: int64
>>> obj2[obj2>0]
d    6
b    7
c    3
dtype: int64
>>> obj2*2
d    12
b    14
a   -10
c     6
dtype: int64
>>> import numpy as np
>>> np.exp(obj2)
d     403.428793
b    1096.633158
a       0.006738
c      20.085537
dtype: float64
>>> 'b' in obj2
True
>>> 'e' in obj2
False
>>> sdata={'Ohio':35000,'Texas':71000,'Oregon':16000,'Utah':5000}
>>> obj3=Series(sdata)
>>> obj3
Ohio      35000
Texas     71000
Oregon    16000
Utah       5000
dtype: int64
>>> states=['California','Ohio','Oregon','Texas']
>>> obj4=Series(sdata,index=states)
>>> obj4
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
dtype: float64
>>> #在这个例子中，sdata中跟states索引相匹配的那三个值会被找出来放到相应的位置上
>>> pd.isnull(obj4)
California     True
Ohio          False
Oregon        False
Texas         False
dtype: bool
>>> pd.notnull(obj4)
California    False
Ohio           True
Oregon         True
Texas          True
dtype: bool
>>> obj4.isnull()
California     True
Ohio          False
Oregon        False
Texas         False
dtype: bool
>>> obj3
Ohio      35000
Texas     71000
Oregon    16000
Utah       5000
dtype: int64
>>> obj4
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
dtype: float64
>>> obj3+obj4
California         NaN
Ohio           70000.0
Oregon         32000.0
Texas         142000.0
Utah               NaN
dtype: float64
>>> obj4.name='population'
>>> obj4.index.name='state'
>>> obj4
state
California        NaN
Ohio          35000.0
Oregon        16000.0
Texas         71000.0
Name: population, dtype: float64
>>> obj.index=['Bob','Steve','Jeff','Ryan']
>>> obj
Bob      4
Steve    7
Jeff    -5
Ryan     3
dtype: int64
------------------------------------------------------------------------------DataFrame
>>> data={'state':['Ohio','Ohio','Ohio','Nevada','Nevada'],'year':[2000,2001,2002,2001,200.],'pop':[1.5,1.7,3.6,2.4,2.9]}
>>> frame=DataFrame(data)
>>> frame
    state    year  pop
0    Ohio  2000.0  1.5
1    Ohio  2001.0  1.7
2    Ohio  2002.0  3.6
3  Nevada  2001.0  2.4
4  Nevada   200.0  2.9
>>> DataFrame(data,columns=['year','state','pop'])
     year   state  pop
0  2000.0    Ohio  1.5
1  2001.0    Ohio  1.7
2  2002.0    Ohio  3.6
3  2001.0  Nevada  2.4
4   200.0  Nevada  2.9
>>> frame2=DataFrame(data,columns=['year','state','pop','debt'],index=['one','two','three','four','five'])
>>> frame2
         year   state  pop debt
one    2000.0    Ohio  1.5  NaN
two    2001.0    Ohio  1.7  NaN
three  2002.0    Ohio  3.6  NaN
four   2001.0  Nevada  2.4  NaN
five    200.0  Nevada  2.9  NaN
>>> frame2.columns
Index(['year', 'state', 'pop', 'debt'], dtype='object')
>>> frame2['state']
one        Ohio
two        Ohio
three      Ohio
four     Nevada
five     Nevada
Name: state, dtype: object
>>> frame2.year
one      2000.0
two      2001.0
three    2002.0
four     2001.0
five      200.0
Name: year, dtype: float64
>>> frame2.ix['three']
year     2002
state    Ohio
pop       3.6
debt      NaN
Name: three, dtype: object
>>> frame2['debt']=16.5
>>> frame2
         year   state  pop  debt
one    2000.0    Ohio  1.5  16.5
two    2001.0    Ohio  1.7  16.5
three  2002.0    Ohio  3.6  16.5
four   2001.0  Nevada  2.4  16.5
five    200.0  Nevada  2.9  16.5
>>> frame2['debt']=np.arange(5.)
>>> frame2
         year   state  pop  debt
one    2000.0    Ohio  1.5   0.0
two    2001.0    Ohio  1.7   1.0
three  2002.0    Ohio  3.6   2.0
four   2001.0  Nevada  2.4   3.0
five    200.0  Nevada  2.9   4.0
>>> val=Series([-1.2,-1.5,-1.7],index=['two','four','five'])
>>> frame2['debt']=val
>>> frame2
         year   state  pop  debt
one    2000.0    Ohio  1.5   NaN
two    2001.0    Ohio  1.7  -1.2
three  2002.0    Ohio  3.6   NaN
four   2001.0  Nevada  2.4  -1.5
five    200.0  Nevada  2.9  -1.7
>>> frame2['estern']=frame2.state=='Ohio'
	   
>>> frame2
	   
         year   state  pop  debt  estern
one    2000.0    Ohio  1.5   NaN    True
two    2001.0    Ohio  1.7  -1.2    True
three  2002.0    Ohio  3.6   NaN    True
four   2001.0  Nevada  2.4  -1.5   False
five    200.0  Nevada  2.9  -1.7   False
>>> #为不存在的列赋值会创建出一个新列，关键字del用于删除列
	   
>>> del frame2['estern']
	   
>>> frame2.columns
	   
Index(['year', 'state', 'pop', 'debt'], dtype='object')
>>> pop={'Nevada':{2001:2.4,2002:2.9},'Ohio':{2000:1.5,2001:3.6}}
	   
>>> frame3=DataFrame(pop)
	   
>>> frame3
	   
      Nevada  Ohio
2000     NaN   1.5
2001     2.4   3.6
2002     2.9   NaN
>>> frame3.T
	   
        2000  2001  2002
Nevada   NaN   2.4   2.9
Ohio     1.5   3.6   NaN
>>> DataFrame(pop,index=[2001,2002,2003])
	   
      Nevada  Ohio
2001     2.4   3.6
2002     2.9   NaN
2003     NaN   NaN
>>> pdata={'Ohio':frame3['Ohio'][:-1],'Nevada':frame3['Nevada'][:2]}
	   
>>> DataFrame(pdata)
	   
      Ohio  Nevada
2000   1.5     NaN
2001   3.6     2.4
>>> frame3.index.name='year';frame3.columns.name='state'
	   
>>> frame3
	   
state  Nevada  Ohio
year               
2000      NaN   1.5
2001      2.4   3.6
2002      2.9   NaN
	   
array([[nan, 1.5],
       [2.4, 3.6],
       [2.9, nan]])
>>> frame2.values
	   
array([[2000.0, 'Ohio', 1.5, nan],
       [2001.0, 'Ohio', 1.7, -1.2],
       [2002.0, 'Ohio', 3.6, nan],
       [2001.0, 'Nevada', 2.4, -1.5],
       [200.0, 'Nevada', 2.9, -1.7]], dtype=object)
-------------------------------------------------------------------
>>> ###索引对象
>>> obj=Series(range(3),index=['a','b','c'])
>>> index=obj.index
>>> index
Index(['a', 'b', 'c'], dtype='object')
>>> index[1:]
Index(['b', 'c'], dtype='object')
>>> ###index对象是不可修改的（immutable），因此用户不能对其进行修改
>>> index[1]='d'
Traceback (most recent call last):
  File "<pyshell#10>", line 1, in <module>
    index[1]='d'
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\indexes\base.py", line 3938, in __setitem__
    raise TypeError("Index does not support mutable operations")
TypeError: Index does not support mutable operations
>>> ###不可修改性非常重要，因为这样才能使index对象在多个数据结构之间安全共享
>>> index=pd.Index(np.arange(3))
>>> obj2=Series([1.5,-2.5,0],index=index)
>>> obj2.index is index
True
>>> data={'state':['Ohio','Ohio','Ohio','Nevada','Nevada'],'year':[2000,2001,2002,2001,2002],'pop':[1.5,1.7,3.6,2.4,2.9]}
>>> frame=DataFrame(data)
>>> frame
    state  year  pop
0    Ohio  2000  1.5
1    Ohio  2001  1.7
2    Ohio  2002  3.6
3  Nevada  2001  2.4
4  Nevada  2002  2.9
>>> DataFrame(data,columns=['year','state','pop'])
   year   state  pop
0  2000    Ohio  1.5
1  2001    Ohio  1.7
2  2002    Ohio  3.6
3  2001  Nevada  2.4
4  2002  Nevada  2.9
>>> frame2=DataFrame(data,columns=['year','state','pop','debt'],index=['one','two','three','four','five'])
>>> frame2
       year   state  pop debt
one    2000    Ohio  1.5  NaN
two    2001    Ohio  1.7  NaN
three  2002    Ohio  3.6  NaN
four   2001  Nevada  2.4  NaN
five   2002  Nevada  2.9  NaN
>>> frame2.columns
Index(['year', 'state', 'pop', 'debt'], dtype='object')
>>> frame2['state']
one        Ohio
two        Ohio
three      Ohio
four     Nevada
five     Nevada
Name: state, dtype: object
>>> frame2.year
one      2000
two      2001
three    2002
four     2001
five     2002
Name: year, dtype: int64
>>> frame2.state
one        Ohio
two        Ohio
three      Ohio
four     Nevada
five     Nevada
Name: state, dtype: object
>>> ###xxx.aaa跟xxx['aaa']作用一样？？
>>> frame2.ix['three']
year     2002
state    Ohio
pop       3.6
debt      NaN
Name: three, dtype: object
>>> frame2.debt=16.5
>>> frame2
       year   state  pop  debt
one    2000    Ohio  1.5  16.5
two    2001    Ohio  1.7  16.5
three  2002    Ohio  3.6  16.5
four   2001  Nevada  2.4  16.5
five   2002  Nevada  2.9  16.5
>>> frame2.debt=np.arange(5.)
>>> frame2
       year   state  pop  debt
one    2000    Ohio  1.5   0.0
two    2001    Ohio  1.7   1.0
three  2002    Ohio  3.6   2.0
four   2001  Nevada  2.4   3.0
five   2002  Nevada  2.9   4.0
>>> val=Series([-1.2,-1.5,-1.7],index=['two','four','five'])
>>> frame2['debt']=val
>>> frame2
       year   state  pop  debt
one    2000    Ohio  1.5   NaN
two    2001    Ohio  1.7  -1.2
three  2002    Ohio  3.6   NaN
four   2001  Nevada  2.4  -1.5
five   2002  Nevada  2.9  -1.7
>>> frame2['estern']=frame2.state=='Ohio'
>>> frame2
       year   state  pop  debt  estern
one    2000    Ohio  1.5   NaN    True
two    2001    Ohio  1.7  -1.2    True
three  2002    Ohio  3.6   NaN    True
four   2001  Nevada  2.4  -1.5   False
five   2002  Nevada  2.9  -1.7   False
>>> del frame2['estern']
>>> frame2.columns
Index(['year', 'state', 'pop', 'debt'], dtype='object')
>>> pop={'Nevada':{2001:2.4,2002:2.9},'Ohio':{2000:1.5,2001:1.7,2002:3.6}}
>>> frame3=DataFrame(pop)
>>> frame3
      Nevada  Ohio
2000     NaN   1.5
2001     2.4   1.7
2002     2.9   3.6
>>> frame3.T
        2000  2001  2002
Nevada   NaN   2.4   2.9
Ohio     1.5   1.7   3.6
>>> DataFrame(pop,index=[2001,2002,2003])
      Nevada  Ohio
2001     2.4   1.7
2002     2.9   3.6
2003     NaN   NaN
>>> pdata={'Ohio':frame3['Ohio'][:1],'Nevada':frame3['Nevada'][:2]}
>>> DataFrame(pdata)
      Ohio  Nevada
2000   1.5     NaN
2001   NaN     2.4
>>> frame3.index.name='year';frame3.columns.name='state'
>>> frame3
state  Nevada  Ohio
year               
2000      NaN   1.5
2001      2.4   1.7
2002      2.9   3.6
>>> frame3.values
array([[nan, 1.5],
       [2.4, 1.7],
       [2.9, 3.6]])
>>> frame2.values
array([[2000, 'Ohio', 1.5, nan],
       [2001, 'Ohio', 1.7, -1.2],
       [2002, 'Ohio', 3.6, nan],
       [2001, 'Nevada', 2.4, -1.5],
       [2002, 'Nevada', 2.9, -1.7]], dtype=object)
>>> frame3
state  Nevada  Ohio
year               
2000      NaN   1.5
2001      2.4   1.7
2002      2.9   3.6
>>> 'Ohio' in frame3.columns
True
>>> 2003 in frame3.index
False
---------------------------------------------------------
>>> obj=Series([4.5,7.2,-5.3,3.6],index=['d','b','a','c'])
>>> obj
d    4.5
b    7.2
a   -5.3
c    3.6
dtype: float64
>>> obj2=obj.reindex(['a','b','c','d','e'])
>>> obj2
a   -5.3
b    7.2
c    3.6
d    4.5
e    NaN
dtype: float64
>>> obj.reindex(['a','b','c','d','e'],fill_value=0)
a   -5.3
b    7.2
c    3.6
d    4.5
e    0.0
dtype: float64
>>> obj3=Series(['blue','purple','yellow'],index=[0,2,4])
>>> obj3.reindex(range(6),method='ffill')
0      blue
1      blue
2    purple
3    purple
4    yellow
5    yellow
dtype: object
>>> frame=DataFrame(np.arange(9).reshape((3,3)),index=['a','c','d'],columns=['Ohio','Texas','California'])
>>> frame
   Ohio  Texas  California
a     0      1           2
c     3      4           5
d     6      7           8
>>> frame2=frame.reindex(['a','b','c','d'])
>>> frame2
   Ohio  Texas  California
a   0.0    1.0         2.0
b   NaN    NaN         NaN
c   3.0    4.0         5.0
d   6.0    7.0         8.0
>>> states=['Texas','Utah','California']
>>> frame.reindex(columns=states)
   Texas  Utah  California
a      1   NaN           2
c      4   NaN           5
d      7   NaN           8
>>> frame.reindex(index=['a','b','c','d'],method='ffill',columns=states)
Traceback (most recent call last):
  File "<pyshell#75>", line 1, in <module>
    frame.reindex(index=['a','b','c','d'],method='ffill',columns=state)
NameError: name 'state' is not defined
>>> frame.ix[['a','b','c','d'],states]
Traceback (most recent call last):
  File "<pyshell#76>", line 1, in <module>
    frame.ix[['a','b','c','d'],states]
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\indexing.py", line 120, in __getitem__
    return self._getitem_tuple(key)
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\indexing.py", line 877, in _getitem_tuple
    return self._multi_take(tup)
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\indexing.py", line 934, in _multi_take
    for (key, axis) in zip(tup, o._AXIS_ORDERS)}
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\indexing.py", line 934, in <dictcomp>
    for (key, axis) in zip(tup, o._AXIS_ORDERS)}
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\indexing.py", line 1161, in _get_listlike_indexer
    raise_missing=raise_missing)
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\indexing.py", line 1252, in _validate_read_indexer
    raise KeyError("{} not in index".format(not_found))
KeyError: "['b'] not in index"
----------------------------------------------------------------states这段一直报错，绝望惹
>>> obj=Series(np.arange(5.),index=['a','b','c','d','e'])
>>> new_obj=obj.drop('c')
>>> new_obj
a    0.0
b    1.0
d    3.0
e    4.0
dtype: float64
>>> obj.drop(['d','c'])
a    0.0
b    1.0
e    4.0
dtype: float64
>>> ###drop方法换回的是一个在指定轴上删除了指定值的新对象&对于DataFrame，可以删除任意轴上的索引值
>>> data=DataFrame(np.arange(16).reshape((4,4)),index=['Ohio','Colorado','Utah','New York'],columns=['one','two','three','four'])
>>> data.drop(['Colorado','Ohio'])
          one  two  three  four
Utah        8    9     10    11
New York   12   13     14    15
>>> data.drop('two',axis=1)
          one  three  four
Ohio        0      2     3
Colorado    4      6     7
Utah        8     10    11
New York   12     14    15
>>> data.drop(['two','four'],axis=1)
          one  three
Ohio        0      2
Colorado    4      6
Utah        8     10
New York   12     14
--------------------------------------------------------------索引、选取和过滤
>>> obj=Series(np.arange(4.),index=['a','b','c','d'])
>>> obj['b']
1.0
>>> obj[1]
1.0
>>> obj[2:4]
c    2.0
d    3.0
dtype: float64
>>> obj[['b','a','d']]
b    1.0
a    0.0
d    3.0
dtype: float64
>>> obj[[1,3]]
b    1.0
d    3.0
dtype: float64
>>> obj[obj<2]
a    0.0
b    1.0
dtype: float64
>>> obj['b':'c']
b    1.0
c    2.0
dtype: float64
>>> obj['b':'c']=5
>>> obj
a    0.0
b    5.0
c    5.0
d    3.0
dtype: float64
>>> data=DataFrame(np.arange(16).reshape((4,4)),index=['Ohio','Colorado','Utah','NewYork'],columns=['one','two','three','four'])
>>> data
          one  two  three  four
Ohio        0    1      2     3
Colorado    4    5      6     7
Utah        8    9     10    11
NewYork    12   13     14    15
>>> data['two']
Ohio         1
Colorado     5
Utah         9
NewYork     13
Name: two, dtype: int32
>>> data[['three','one']]
          three  one
Ohio          2    0
Colorado      6    4
Utah         10    8
NewYork      14   12
>>> data[:2]
          one  two  three  four
Ohio        0    1      2     3
Colorado    4    5      6     7
>>> data[2:]
         one  two  three  four
Utah       8    9     10    11
NewYork   12   13     14    15
>>> data[data['three']>5]
          one  two  three  four
Colorado    4    5      6     7
Utah        8    9     10    11
NewYork    12   13     14    15
>>> data<5
            one    two  three   four
Ohio       True   True   True   True
Colorado   True  False  False  False
Utah      False  False  False  False
NewYork   False  False  False  False
>>> data[data<5]=0
>>> data
          one  two  three  four
Ohio        0    0      0     0
Colorado    0    5      6     7
Utah        8    9     10    11
NewYork    12   13     14    15
>>> data.ix[['Colorado','Utah'],[3,0,1]]
          four  one  two
Colorado     7    0    5
Utah        11    8    9
>>> data.ix[2]
one       8
two       9
three    10
four     11
Name: Utah, dtype: int32
>>> data.ix[:'Utah','two']
Ohio        0
Colorado    5
Utah        9
Name: two, dtype: int32
>>> data.ix[data.three>5,:3]
          one  two  three
Colorado    0    5      6
Utah        8    9     10
NewYork    12   13     14
-------------------------------------------------------------------------------算术运算和数据对齐
>>> data.ix[['Colorado','Utah'],[3,0,1]]
          four  one  two
Colorado     7    0    5
Utah        11    8    9
>>> data.ix[2]
one       8
two       9
three    10
four     11
Name: Utah, dtype: int32
>>> data.ix[:'Utah','two']
Ohio        0
Colorado    5
Utah        9
Name: two, dtype: int32
>>> data.ix[data.three>5,:3]
          one  two  three
Colorado    0    5      6
Utah        8    9     10
NewYork    12   13     14
>>> s1=Series([7.3,-2.5,3.4,1.5],index=['a','c','d','e'])
>>> s2=Series([-2.1,3.6,-1.5,4,3.1],index=['a','c','e','f','g'])
>>> s1
a    7.3
c   -2.5
d    3.4
e    1.5
dtype: float64
>>> s2
a   -2.1
c    3.6
e   -1.5
f    4.0
g    3.1
dtype: float64
>>> s1+s2
a    5.2
c    1.1
d    NaN
e    0.0
f    NaN
g    NaN
dtype: float64
>>> df1=DataFrame(np.arange(9.).reshape((3,3)),columns=list('bcd'),index=['Ohio','Texas','Colorado'])
>>> df2=DataFrame(np.arange(12.).reshape((4,3)),columns=list('bde'),index=['Utah','Ohio','Texas','Oregon'])
>>> df1
            b    c    d
Ohio      0.0  1.0  2.0
Texas     3.0  4.0  5.0
Colorado  6.0  7.0  8.0
>>> df2
          b     d     e
Utah    0.0   1.0   2.0
Ohio    3.0   4.0   5.0
Texas   6.0   7.0   8.0
Oregon  9.0  10.0  11.0
>>> df1+df2
            b   c     d   e
Colorado  NaN NaN   NaN NaN
Ohio      3.0 NaN   6.0 NaN
Oregon    NaN NaN   NaN NaN
Texas     9.0 NaN  12.0 NaN
Utah      NaN NaN   NaN NaN
>>> df1=DataFrame(np.arange(12.).reshape((3,4)),columns=list('abcd'))
>>> df2=DataFrame(np.arange(20.).reshape((4,5)),columns=list('abcde'))
>>> df1
     a    b     c     d
0  0.0  1.0   2.0   3.0
1  4.0  5.0   6.0   7.0
2  8.0  9.0  10.0  11.0
>>> df2
      a     b     c     d     e
0   0.0   1.0   2.0   3.0   4.0
1   5.0   6.0   7.0   8.0   9.0
2  10.0  11.0  12.0  13.0  14.0
3  15.0  16.0  17.0  18.0  19.0
>>> df1+df2
      a     b     c     d   e
0   0.0   2.0   4.0   6.0 NaN
1   9.0  11.0  13.0  15.0 NaN
2  18.0  20.0  22.0  24.0 NaN
3   NaN   NaN   NaN   NaN NaN
>>> ###使用df1的add方法，传入df2以及一个fill_value参数
>>> df1.add(df2,fill_value=0)
      a     b     c     d     e
0   0.0   2.0   4.0   6.0   4.0
1   9.0  11.0  13.0  15.0   9.0
2  18.0  20.0  22.0  24.0  14.0
3  15.0  16.0  17.0  18.0  19.0
>>> df1.reindex(columns=df2.columns,fill_value=0)
     a    b     c     d  e
0  0.0  1.0   2.0   3.0  0
1  4.0  5.0   6.0   7.0  0
2  8.0  9.0  10.0  11.0  0
-----------------------------------------------------------DataFrame和Series之间的运算
>>> arr=np.arange(12.).reshape((3,4))
>>> arr
array([[ 0.,  1.,  2.,  3.],
       [ 4.,  5.,  6.,  7.],
       [ 8.,  9., 10., 11.]])
>>> arr[0]
array([0., 1., 2., 3.])
>>> arr-arr[0]
array([[0., 0., 0., 0.],
       [4., 4., 4., 4.],
       [8., 8., 8., 8.]])
>>> ###这就叫广播
>>> frame=DataFrame(np.arange(12.).reshape((4,3)),columns=list('bde'),index=['Utah','Ohio','Texas','Oregon'])
>>> series=frame.ix[0]
>>> frame
          b     d     e
Utah    0.0   1.0   2.0
Ohio    3.0   4.0   5.0
Texas   6.0   7.0   8.0
Oregon  9.0  10.0  11.0
>>> series
b    0.0
d    1.0
e    2.0
Name: Utah, dtype: float64
>>> frame-series
          b    d    e
Utah    0.0  0.0  0.0
Ohio    3.0  3.0  3.0
Texas   6.0  6.0  6.0
Oregon  9.0  9.0  9.0
>>> series2=Series(range(3),index=['b','e','f'])
>>> frame+series2
          b   d     e   f
Utah    0.0 NaN   3.0 NaN
Ohio    3.0 NaN   6.0 NaN
Texas   6.0 NaN   9.0 NaN
Oregon  9.0 NaN  12.0 NaN
>>> series3=frame['d']
>>> frame
          b     d     e
Utah    0.0   1.0   2.0
Ohio    3.0   4.0   5.0
Texas   6.0   7.0   8.0
Oregon  9.0  10.0  11.0
>>> series3
Utah       1.0
Ohio       4.0
Texas      7.0
Oregon    10.0
Name: d, dtype: float64
>>> frame.sub(series3,axis=0)
          b    d    e
Utah   -1.0  0.0  1.0
Ohio   -1.0  0.0  1.0
Texas  -1.0  0.0  1.0
Oregon -1.0  0.0  1.0
-----------------------------------------------------------------函数应用和映射
>>> frame=DataFrame(np.random.randn(4,3),columns=list('bde'),index=['Utah','Ohio','Texas','Oregon'])
>>> frame
               b         d         e
Utah   -0.575944 -1.465474  0.047973
Ohio   -0.040309 -0.531257 -0.990085
Texas  -1.510778 -0.890150  0.908079
Oregon -0.182483 -1.506683 -0.320524
>>> np.abs(frame)
               b         d         e
Utah    0.575944  1.465474  0.047973
Ohio    0.040309  0.531257  0.990085
Texas   1.510778  0.890150  0.908079
Oregon  0.182483  1.506683  0.320524
>>> f=lambda x:x.max()-x.min()
>>> frame.apply(f)
b    1.470470
d    0.975425
e    1.898164
dtype: float64
>>> frame.apply(f,axis=1)
Utah      1.513448
Ohio      0.949776
Texas     2.418858
Oregon    1.324200
dtype: float64
>>> #apply方法可以将函数应用到由各行或各列所形成的一维数组上。
>>> def f(x):return Series([x.min(),x.max()],index=['min','max'])

>>> frame.apply(f)
            b         d         e
min -1.510778 -1.506683 -0.990085
max -0.040309 -0.531257  0.908079
>>> format=lambda x:'%.2f'%x
>>> frame.applymap(format)
            b      d      e
Utah    -0.58  -1.47   0.05
Ohio    -0.04  -0.53  -0.99
Texas   -1.51  -0.89   0.91
Oregon  -0.18  -1.51  -0.32
>>> #许多最为常见的数组统计功能都被实现成DataFrame的方法（如sum和mean），因此无需使用apply方法。除标量值外，传递给apply的函数还可以返回由多个值组成的Series。加入想得到frame中各个浮点值的格式化字符串，使用applymap即可。
>>> frame['e'].map(format)
Utah       0.05
Ohio      -0.99
Texas      0.91
Oregon    -0.32
Name: e, dtype: object
-------------------------------------------------------------------------------排序和排名
>>> obj=Series(range(4),index=['d','a','b','c'])
>>> obj.sort_index()
a    1
b    2
c    3
d    0
dtype: int64
>>> frame=DataFrame(np.arange(8).reshape((2,4)),index=['three','one'],columns=['d','a','b','c'])
>>> frame.sort_index(axis=1)
       a  b  c  d
three  1  2  3  0
one    5  6  7  4
>>> frame.sort_index()
       d  a  b  c
one    4  5  6  7
three  0  1  2  3
>>> frame.sort_index(axis=1,ascending=False)
       d  c  b  a
three  0  3  2  1
one    4  7  6  5
>>> obj.order()
Traceback (most recent call last):
  File "<pyshell#25>", line 1, in <module>
    obj.order()
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\generic.py", line 5067, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'Series' object has no attribute 'order'
>>> obj=Series([4,7,-3,2])
>>> obj.order()
Traceback (most recent call last):
  File "<pyshell#27>", line 1, in <module>
    obj.order()
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\generic.py", line 5067, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'Series' object has no attribute 'order'
>>> obj=Series([4,np.nan,7,np.nan,-3,2])
>>> obj.order()
Traceback (most recent call last):
  File "<pyshell#7>", line 1, in <module>
    obj.order()
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\generic.py", line 5067, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'Series' object has no attribute 'order'
>>> frame=DataFrame({'b':[4,7,-3,2],'a':[0,1,0,1]})
>>> frame
   b  a
0  4  0
1  7  1
2 -3  0
3  2  1
>>> frame.sort_index(by='b')

Warning (from warnings module):
  File "__main__", line 1
FutureWarning: by argument to sort_index is deprecated, please use .sort_values(by=...)
   b  a
2 -3  0
3  2  1
0  4  0
1  7  1
>>> #用by可以根据一个或多个列中的值进行排序。
>>> frame.sort_index(by=['a','b'])

Warning (from warnings module):
  File "__main__", line 1
FutureWarning: by argument to sort_index is deprecated, please use .sort_values(by=...)
   b  a
2 -3  0
0  4  0
3  2  1
1  7  1
>>> obj=Series([7,-5,7,4,2,0,4])
>>> obj.rank()
0    6.5
1    1.0
2    6.5
3    4.5
4    3.0
5    2.0
6    4.5
dtype: float64
>>> #rank通过“为各组分配一个平均排名”的方式破坏平级关系。
>>> obj.rank(method='first')
0    6.0
1    1.0
2    7.0
3    4.0
4    3.0
5    2.0
6    5.0
dtype: float64
>>> #rank也可以根据在原数据中出现的顺序给出排名
>>> obj.rank(ascending=False,method='max')
0    2.0
1    7.0
2    2.0
3    4.0
4    5.0
5    6.0
6    4.0
dtype: float64
>>> #rank也可以按照降序进行排名
>>> frame=DataFrame({'b':[4.3,7,-3,2],'a':[0,1,0,1],'c':[-2,5,8,-2.5]})
>>> frame
     b  a    c
0  4.3  0 -2.0
1  7.0  1  5.0
2 -3.0  0  8.0
3  2.0  1 -2.5
>>> frame.rank(axis=1)
     b    a    c
0  3.0  2.0  1.0
1  3.0  1.0  2.0
2  1.0  2.0  3.0
3  3.0  2.0  1.0
-------------------------------------------------------------------带有重复值的轴索引
>>> obj=Series(range(5),index=['a','a','b','b','c'])
>>> obj
a    0
a    1
b    2
b    3
c    4
dtype: int64
>>> obj.index.is_unique
False
>>> #索引的is_unique属性可以告诉你它的值是否唯一
>>> obj['a']
a    0
a    1
dtype: int64
>>> obj['c']
4
>>> df=DataFrame(np.random.randn(4,3),index=['a','a','b','b'])
>>> df
          0         1         2
a  2.024408 -0.054470 -2.212022
a  2.273231  0.596417 -0.306488
b -1.307511  1.339858  0.534518
b  0.047419 -1.395187  2.168480
>>> df.ix['b']
          0         1         2
b -1.307511  1.339858  0.534518
b  0.047419 -1.395187  2.168480
----------------------------------------------------------------------------------汇总和计算描述统计
>>> df=DataFrame([[1.4,np.nan],[7.1,-4.5],[np.nan,np.nan],[0.75,-1.3]],index=['a','b','c','d'],columns=['one','two'])
>>> df
    one  two
a  1.40  NaN
b  7.10 -4.5
c   NaN  NaN
d  0.75 -1.3
>>> df.sum()
one    9.25
two   -5.80
dtype: float64
>>> df.sum(axis=1)
a    1.40
b    2.60
c    0.00
d   -0.55
dtype: float64
>>> #NA值会自动被排除，除非整个切片（这里指的是行或列）都是NA
>>> df.mean(axis=1,skipna=False)
a      NaN
b    1.300
c      NaN
d   -0.275
dtype: float64
>>> #skipna：排除缺失值，默认值为True
>>> df.idxmax()
one    b
two    d
dtype: object
>>> df.cumsum()
    one  two
a  1.40  NaN
b  8.50 -4.5
c   NaN  NaN
d  9.25 -5.8
>>> df.describe()
            one       two
count  3.000000  2.000000
mean   3.083333 -2.900000
std    3.493685  2.262742
min    0.750000 -4.500000
25%    1.075000 -3.700000
50%    1.400000 -2.900000
75%    4.250000 -2.100000
max    7.100000 -1.300000
>>> obj=Series(['a','a','b','c']*4)
>>> obj.describe()
count     16
unique     3
top        a
freq       8
dtype: object
>>> #describe：针对Series或各DataFrame列计算汇总统计
-----------------------------------------------------------------相关系数与协方差
鉴于我datareader安装几次都不行，这段先pass
----------------------------------------------------------------唯一值、值计数以及成员资格
>>> obj=Series(['c','a','d','a','a','b','b','c','c'])
>>> uniques=obj.unique()
>>> uniques
array(['c', 'a', 'd', 'b'], dtype=object)
>>> #unique函数可以得到series中唯一的数组值
>>> #unique函数可以得到series中唯一值数组
>>> obj.value_counts()
a    3
c    3
b    2
d    1
dtype: int64
>>> #value_counts用于计算series中各值出现的频率
>>> pd.value_counts(obj.values,sort=False)
c    3
a    3
b    2
d    1
dtype: int64
>>> mask=obj.isin(['b','c'])
>>> mask
0     True
1    False
2    False
3    False
4    False
5     True
6     True
7     True
8     True
dtype: bool
>>> obj[mask]
0    c
5    b
6    b
7    c
8    c
dtype: object
>>> #isin用于判断矢量化集合的成员资格。
>>> data=DataFrame({'Qu1':[1,3,4,3,4],'Qu2':[2,3,1,2,3],'Qu3':[1,5,2,4,4]})
>>> data
   Qu1  Qu2  Qu3
0    1    2    1
1    3    3    5
2    4    1    2
3    3    2    4
4    4    3    4
>>> result=data.apply(pd.value_counts).fillna(0)
>>> result
   Qu1  Qu2  Qu3
1  1.0  1.0  1.0
2  0.0  2.0  1.0
3  2.0  2.0  0.0
4  2.0  0.0  2.0
5  0.0  0.0  1.0
----------------------------------------------------------------处理缺失数据
>>> string_data=Series(['aardvark','artichoke',np.nan,'avocado'])
>>> string_data
0     aardvark
1    artichoke
2          NaN
3      avocado
dtype: object
>>> string_data.isnull()
0    False
1    False
2     True
3    False
dtype: bool
>>> string_data[0]=None
>>> string_data.isnull()
0     True
1    False
2     True
3    False
dtype: bool
----------------------------------------------------------------滤除缺失数据
>>> from numpy import nan as NA
>>> data=Series([1,NA,3.5,NA,7])
>>> data.dropna()
0    1.0
2    3.5
4    7.0
dtype: float64
>>> data[data.notnull()]
0    1.0
2    3.5
4    7.0
dtype: float64
>>> data=DataFrame([[1.,6.5,3.],[1.,NA,NA],[NA,NA,NA],[NA,6.5,3.]])
>>> cleaned=data.dropna()
>>> data
     0    1    2
0  1.0  6.5  3.0
1  1.0  NaN  NaN
2  NaN  NaN  NaN
3  NaN  6.5  3.0
>>> cleaned
     0    1    2
0  1.0  6.5  3.0
>>> data.dropna(how='all')
     0    1    2
0  1.0  6.5  3.0
1  1.0  NaN  NaN
3  NaN  6.5  3.0
>>> #用how='all'将只丢弃全部为NA的那些行
>>> data[4]=NA
>>> data
     0    1    2   4
0  1.0  6.5  3.0 NaN
1  1.0  NaN  NaN NaN
2  NaN  NaN  NaN NaN
3  NaN  6.5  3.0 NaN
>>> data.dropna(axis=1,how='all')
     0    1    2
0  1.0  6.5  3.0
1  1.0  NaN  NaN
2  NaN  NaN  NaN
3  NaN  6.5  3.0
>>> #用axis=1和how='all'将只丢弃全部为NA的那些列
>>> df=DataFrame(np.random.randn(7,3))
>>> df.ix[:4,1]=NA;df.ix[:2,2]=NA
>>> df
          0         1         2
0  1.596290       NaN       NaN
1  0.201177       NaN       NaN
2  0.262659       NaN       NaN
3  0.792856       NaN  0.811609
4  0.153933       NaN -0.218228
5  1.317273 -0.826418  1.826503
6 -0.894669 -0.082104 -1.319191
>>> df.dropna(thresh=3)
          0         1         2
5  1.317273 -0.826418  1.826503
6 -0.894669 -0.082104 -1.319191
>>> #用thresh可以只留下部分观测数据
----------------------------------------------------------------填充缺失数据
>>> df.fillna(0)
          0         1         2
0  1.596290  0.000000  0.000000
1  0.201177  0.000000  0.000000
2  0.262659  0.000000  0.000000
3  0.792856  0.000000  0.811609
4  0.153933  0.000000 -0.218228
5  1.317273 -0.826418  1.826503
6 -0.894669 -0.082104 -1.319191
>>> #通过字典调用fillna，就可以实现对不同的列填充不同的值
>>> df.fillna({1:0.5,3:-1})
          0         1         2
0  1.596290  0.500000       NaN
1  0.201177  0.500000       NaN
2  0.262659  0.500000       NaN
3  0.792856  0.500000  0.811609
4  0.153933  0.500000 -0.218228
5  1.317273 -0.826418  1.826503
6 -0.894669 -0.082104 -1.319191
>>> _=df.fillna(0,inplace=True)
>>> df
          0         1         2
0  1.596290  0.000000  0.000000
1  0.201177  0.000000  0.000000
2  0.262659  0.000000  0.000000
3  0.792856  0.000000  0.811609
4  0.153933  0.000000 -0.218228
5  1.317273 -0.826418  1.826503
6 -0.894669 -0.082104 -1.319191
>>> #fillna会默认返回新对象
>>> df=DataFrame(np.random.randn(6,3))
>>> df.ix[2:,1]=NA;df.ix[4:,2]=NA
>>> df
          0         1         2
0 -0.904331  0.927779 -1.266084
1  0.267501  1.042698 -0.332381
2 -0.678568       NaN  1.258080
3 -0.282295       NaN  2.462687
4  0.079591       NaN       NaN
5  0.750014       NaN       NaN
>>> df.fillna(method='ffill')
          0         1         2
0 -0.904331  0.927779 -1.266084
1  0.267501  1.042698 -0.332381
2 -0.678568  1.042698  1.258080
3 -0.282295  1.042698  2.462687
4  0.079591  1.042698  2.462687
5  0.750014  1.042698  2.462687
>>> df.fillna(method='ffill',limit=2)
          0         1         2
0 -0.904331  0.927779 -1.266084
1  0.267501  1.042698 -0.332381
2 -0.678568  1.042698  1.258080
3 -0.282295  1.042698  2.462687
4  0.079591       NaN  2.462687
5  0.750014       NaN  2.462687
>>> data=Series([1.,NA,3.5,NA,7])
>>> data.fillna(data.mean())
0    1.000000
1    3.833333
2    3.500000
3    3.833333
4    7.000000
dtype: float64
--------------------------------------------------层次化索引
>>> data=Series(np.random.randn(10),index=[['a','a','a','b','b','b','c','c','d','d'],[1,2,3,1,2,3,1,2,2,3]])
>>> data
a  1    0.334413
   2    0.590272
   3    0.825866
b  1    1.013890
   2   -0.208598
   3   -0.245009
c  1    0.664272
   2    0.055390
d  2   -1.228748
   3    0.639513
dtype: float64
>>> data.index
MultiIndex(levels=[['a', 'b', 'c', 'd'], [1, 2, 3]],
           codes=[[0, 0, 0, 1, 1, 1, 2, 2, 3, 3], [0, 1, 2, 0, 1, 2, 0, 1, 1, 2]])
>>> data['b']
1    1.013890
2   -0.208598
3   -0.245009
dtype: float64
>>> data['b':'c']
b  1    1.013890
   2   -0.208598
   3   -0.245009
c  1    0.664272
   2    0.055390
dtype: float64
>>> data.ix[['b','d']]
b  1    1.013890
   2   -0.208598
   3   -0.245009
d  2   -1.228748
   3    0.639513
dtype: float64
>>> data[:,2]
a    0.590272
b   -0.208598
c    0.055390
d   -1.228748
dtype: float64
>>> data.unstack()
          1         2         3
a  0.334413  0.590272  0.825866
b  1.013890 -0.208598 -0.245009
c  0.664272  0.055390       NaN
d       NaN -1.228748  0.639513
>>> data.unstack().stack()
a  1    0.334413
   2    0.590272
   3    0.825866
b  1    1.013890
   2   -0.208598
   3   -0.245009
c  1    0.664272
   2    0.055390
d  2   -1.228748
   3    0.639513
dtype: float64
>>> frame=DataFrame(np.arange(12).reshape((4,3)),index=[['a','a','b','b'],[1,2,1,2]],columns=[['Ohio','Ohio','Colorado'],['Green','Red','Green']])
		
>>> frame
		
     Ohio     Colorado
    Green Red    Green
a 1     0   1        2
  2     3   4        5
b 1     6   7        8
  2     9  10       11
>>> frame.index.names=['key1','key2']
		
>>> frame.columns.names=['state','color']
		
>>> frame
		
state      Ohio     Colorado
color     Green Red    Green
key1 key2                   
a    1        0   1        2
     2        3   4        5
b    1        6   7        8
     2        9  10       11
>>> frame['Ohio']
		
color      Green  Red
key1 key2            
a    1         0    1
     2         3    4
b    1         6    7
     2         9   10
------------------------------------------------------重新分级顺序
>>> frame.swaplevel('key1','key2')
		
state      Ohio     Colorado
color     Green Red    Green
key2 key1                   
1    a        0   1        2
2    a        3   4        5
1    b        6   7        8
2    b        9  10       11
>>> frame.sortlevel(1)
		
Traceback (most recent call last):
  File "<pyshell#130>", line 1, in <module>
    frame.sortlevel(1)
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\generic.py", line 5067, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'DataFrame' object has no attribute 'sortlevel'
>>> frame.swaplevel(0,1).sortlevel(0)
		
Traceback (most recent call last):
  File "<pyshell#131>", line 1, in <module>
    frame.swaplevel(0,1).sortlevel(0)
  File "D:\python\python3.6.6\lib\site-packages\pandas\core\generic.py", line 5067, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'DataFrame' object has no attribute 'sortlevel'
------------------------------------------------------根据级别汇总
>>> frame.sum(level='key2')
		
state  Ohio     Colorado
color Green Red    Green
key2                    
1         6   8       10
2        12  14       16
>>> frame.sum(level='color',axis=1)
		
color      Green  Red
key1 key2            
a    1         2    1
     2         8    4
b    1        14    7
     2        20   10
>>> frame=DataFrame({'a':range(7),'b':range(7,0,-1),'c':['one','one','one','two','two','two','two'],'d':[0,1,2,0,1,2,3]})
>>> frame
   a  b    c  d
0  0  7  one  0
1  1  6  one  1
2  2  5  one  2
3  3  4  two  0
4  4  3  two  1
5  5  2  two  2
6  6  1  two  3
>>> frame2=frame.set_index(['c','d'])
>>> frame2
       a  b
c   d      
one 0  0  7
    1  1  6
    2  2  5
two 0  3  4
    1  4  3
    2  5  2
    3  6  1
>>> frame.set_index(['c','d'],drop=False)
       a  b    c  d
c   d              
one 0  0  7  one  0
    1  1  6  one  1
    2  2  5  one  2
two 0  3  4  two  0
    1  4  3  two  1
    2  5  2  two  2
    3  6  1  two  3
>>> #DataFrame的set_index函数会将其中一个或多个列转换为行索引，创建一个新的DataFrame；reset_index的功能跟set_index刚好相反，层次化索引的级别会被转移到列里面。
>>> frame2.reset_index()
     c  d  a  b
0  one  0  0  7
1  one  1  1  6
2  one  2  2  5
3  two  0  3  4
4  two  1  4  3
5  two  2  5  2
6  two  3  6  1
---------------------------------------------------------------------chapter6
>>> file='D:\python\pra\ex1.csv'
>>> df=pd.read_csv(file)
>>> df
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> pd.read_table(file,sep=',')

Warning (from warnings module):
  File "__main__", line 1
FutureWarning: read_table is deprecated, use read_csv instead.
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> pd.read_csv(file,names=['a','b','c','d','message'])
    a   b   c      d  message
1   2   3   4  hello      NaN
5   6   7   8  world      NaN
9  10  11  12    foo      NaN
>>> pd.read_csv(file,header=None)
   0   1   2   3      4
0  1   2   3   4  hello
1  5   6   7   8  world
2  9  10  11  12    foo
>>> pd.read_csv(file,names=['a','b','c','d','message'])
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> names=['a','b','c','d','message']
>>> pd.read_csv(file,names=names,index_col='message')
         a   b   c   d
message               
hello    1   2   3   4
world    5   6   7   8
foo      9  10  11  12
>>> file='D:\python\pra\ex3.csv'
>>> list(open(file))
[',,A,B,"C\',"\n', ',\'aaa,-0.264438,-1.026059,"-0.619500,"\n', ',\'bbb,0.927272,0.302904,"-0.032399,"\n', ',\'ccc,-0.264273,-0.386314,"-0.217601,"\n', ',\'ddd,-0.871858,-0.348382,"1.100491,"\n']
>>> result=pd.read_table(file)

Warning (from warnings module):
  File "__main__", line 1
FutureWarning: read_table is deprecated, use read_csv instead, passing sep='\t'.
>>> result
                              ,,A,B,"C',"
0  ,'aaa,-0.264438,-1.026059,"-0.619500,"
1    ,'bbb,0.927272,0.302904,"-0.032399,"
2  ,'ccc,-0.264273,-0.386314,"-0.217601,"
3   ,'ddd,-0.871858,-0.348382,"1.100491,"
>>> #是我创建文件的时候有问题吗 这个表格好奇怪哦
>>> result
                              ,,A,B,"C',"
0  ,'aaa,-0.264438,-1.026059,"-0.619500,"
1    ,'bbb,0.927272,0.302904,"-0.032399,"
2  ,'ccc,-0.264273,-0.386314,"-0.217601,"
3   ,'ddd,-0.871858,-0.348382,"1.100491,"
>>> file='D:\python\pra\ex1.csv'
>>> list(open(file))
['a,b,c,d,message\n', '1,2,3,4,hello\n', '5,6,7,8,world\n', '9,10,11,12,foo\n']
>>> pd.read_csv(file)
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> file='D:\python\pra\ex5.csv'
>>> result=pd.read_csv(file)
>>> result
   Unnamed: 0 something  a   b     c   d message  Unnamed: 7
0         NaN       one  1   2   3.0   4     NaN         NaN
1         NaN       two  5   6   NaN   8   world         NaN
2         NaN     three  9  10  11.0  12     foo         NaN
>>> result
   Unnamed: 0 something  a   b     c   d message  Unnamed: 7
0         NaN       one  1   2   3.0   4     NaN         NaN
1         NaN       two  5   6   NaN   8   world         NaN
2         NaN     three  9  10  11.0  12     foo         NaN
>>> result
   Unnamed: 0 something  a   b     c   d message  Unnamed: 7
0         NaN       one  1   2   3.0   4     NaN         NaN
1         NaN       two  5   6   NaN   8   world         NaN
2         NaN     three  9  10  11.0  12     foo         NaN
>>> result
   Unnamed: 0 something  a   b     c   d message  Unnamed: 7
0         NaN       one  1   2   3.0   4     NaN         NaN
1         NaN       two  5   6   NaN   8   world         NaN
2         NaN     three  9  10  11.0  12     foo         NaN
>>> pd.isnull(result)
   Unnamed: 0  something      a      b      c      d  message  Unnamed: 7
0        True      False  False  False  False  False     True        True
1        True      False  False  False   True  False    False        True
2        True      False  False  False  False  False    False        True
>>> result=pd.read_csv(file,na_values=['NULL'])
Traceback (most recent call last):
  File "<pyshell#61>", line 1, in <module>
    result=pd.read_csv(file,na_values=['NULL'])
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\parsers.py", line 702, in parser_f
    return _read(filepath_or_buffer, kwds)
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\parsers.py", line 429, in _read
    parser = TextFileReader(filepath_or_buffer, **kwds)
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\parsers.py", line 895, in __init__
    self._make_engine(self.engine)
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\parsers.py", line 1122, in _make_engine
    self._engine = CParserWrapper(self.f, **self.options)
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\parsers.py", line 1853, in __init__
    self._reader = parsers.TextReader(src, **kwds)
  File "pandas\_libs\parsers.pyx", line 387, in pandas._libs.parsers.TextReader.__cinit__
  File "pandas\_libs\parsers.pyx", line 705, in pandas._libs.parsers.TextReader._setup_parser_source
FileNotFoundError: [Errno 2] File b'D:\\python\\pra\\ex5.csv' does not exist: b'D:\\python\\pra\\ex5.csv'
>>> file='D:\python\pra\ex6.csv'
>>> result=pd.read_csv(file,na_values=['NULL'])
>>> result
  something  a   b     c   d message
0       one  1   2   3.0   4     NaN
1       two  5   6   NaN   8   world
2     three  9  10  11.0  12     foo
>>> pd.options.display.max_rows=10
>>> data=pd.read_csv(file)
>>> data
  something  a   b     c   d message
0       one  1   2   3.0   4     NaN
1       two  5   6   NaN   8   world
2     three  9  10  11.0  12     foo
>>> data.to_csv('out.csv')
>>> !type out.csv
SyntaxError: invalid syntax
>>> !type out.csv
SyntaxError: invalid syntax
>>> ,something,a,b,c,d,message
SyntaxError: invalid syntax
>>> 0,one,1,2,3.0,4,
Traceback (most recent call last):
  File "<pyshell#77>", line 1, in <module>
    0,one,1,2,3.0,4,
NameError: name 'one' is not defined
>>> 1,two,5,6,,8,world
SyntaxError: invalid syntax
>>> 2,three,9,10,11.0,12,foo
Traceback (most recent call last):
  File "<pyshell#79>", line 1, in <module>
    2,three,9,10,11.0,12,foo
NameError: name 'three' is not defined
>>> data=pd.date_range('1/1/2000',periods=7)
>>> data
DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-04',
               '2000-01-05', '2000-01-06', '2000-01-07'],
              dtype='datetime64[ns]', freq='D')
>>> ts=Series(np.arange(7),index=data)
>>> ts
2000-01-01    0
2000-01-02    1
2000-01-03    2
2000-01-04    3
2000-01-05    4
2000-01-06    5
2000-01-07    6
Freq: D, dtype: int32
>>> import csv
>>> file='D:\python\pra\ex7.csv'
>>> f=open(file)
>>> reader=csv.reader(f)
>>> for line in reader:print (line)

['a', 'b', 'c', '']
['1', '2', '3', '']
['1', '2', '3', '4']
>>> with open(file) as f:lines=list(csv.reader(f))

>>> header,values=lines[0],lines[1:]
>>> data_dict={h:v for h,v in zip(header,zip(*values))}
>>> data_dict
{'a': ('1', '1'), 'b': ('2', '2'), 'c': ('3', '3'), '': ('', '4')}
>>> class my_dialect(csv.Dialect):
	lineterminator='\n'
	dlimiter=';'
	quotechar='"'
	quoting=csv.QUOTE_MINIMAL
reader=csv.reader(f,delimiter='|')
SyntaxError: invalid syntax
>>> file='D:\python\pra\ex8.csv'
>>> with open(file,'w')as f:
	writer = csv.writer(f, dialect=my_dialect)
	writer.writerow(('one', 'two', 'three'))
	writer.writerow(('1', '2', '3'))
	writer.writerow(('4', '5', '6'))
	writer.writerow(('7', '8', '9'))

	
Traceback (most recent call last):
  File "<pyshell#108>", line 2, in <module>
    writer = csv.writer(f, dialect=my_dialect)
NameError: name 'my_dialect' is not defined
>>> obj="""
{"name":"Wes",
"places_lived":["United States","Spain","Germany"],
"pet":null,
"siblings":[{"name":"Scott","age":30,"pets":["Zeus","Zuko"]},
	   {"name":"Katie","age":38,
	   "pets":["Sixes","Stache","Cisco"]}]
}
"""
>>> import json
>>> result=json.loads(obj)
>>> result
{'name': 'Wes', 'places_lived': ['United States', 'Spain', 'Germany'], 'pet': None, 'siblings': [{'name': 'Scott', 'age': 30, 'pets': ['Zeus', 'Zuko']}, {'name': 'Katie', 'age': 38, 'pets': ['Sixes', 'Stache', 'Cisco']}]}
>>> asjson=json.dumps(result)
>>> siblings=pd.DataFrame(result['siblings'],columns=['name','age'])
>>> asjson=json.dumps(result)
>>> siblings=pd.DataFrame(result['siblings'],columns=['name','age'])
>>> siblings
    name  age
0  Scott   30
1  Katie   38
>>> file='D:\python\pra\ex1.csv'
>>> frame=pd.read_csv(file)
>>> frame
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>> frame.to_pickle('frame_pickle')
>>> pd.read_pickle('frame_pickle')
   a   b   c   d message
0  1   2   3   4   hello
1  5   6   7   8   world
2  9  10  11  12     foo
>>>  file1='D:\python\pra\ex1.xlsx'
SyntaxError: unexpected indent
>>> file1='D:\python\pra\ex1.xlsx'
>>> xlsx=pd.ExcelFile(file)
Traceback (most recent call last):
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\excel.py", line 391, in __init__
    import xlrd
ModuleNotFoundError: No module named 'xlrd'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<pyshell#134>", line 1, in <module>
    xlsx=pd.ExcelFile(file)
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\excel.py", line 653, in __init__
    self._reader = self._engines[engine](self._io)
  File "D:\python\python3.6.6\lib\site-packages\pandas\io\excel.py", line 393, in __init__
    raise ImportError(err_msg)
ImportError: Install xlrd >= 1.0.0 for Excel support




     


  


