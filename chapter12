>>> from pandas import Series,DataFrame
>>> import numpy as np
>>> import pandas as pd
>>> values=pd.Series(['apple','orange','apple','apple']*2)
>>> values
0     apple
1    orange
2     apple
3     apple
4     apple
5    orange
6     apple
7     apple
dtype: object
>>> pd.unique(values)
array(['apple', 'orange'], dtype=object)
>>> pd.value_counts(values)
apple     6
orange    2
dtype: int64
>>> values=pd.Series([0,1,0,0]*2)
>>> dim=pd.Series(['apple','orange'])
>>> values
0    0
1    1
2    0
3    0
4    0
5    1
6    0
7    0
dtype: int64
>>> dim
0     apple
1    orange
dtype: object
>>> dim.take(values)
0     apple
1    orange
0     apple
0     apple
0     apple
1    orange
0     apple
0     apple
dtype: object
>>> fruits=['apple','orange','apple','apple']*2
>>> N=len(fruits)
>>> df=pd.DataFrame({'fruit':fruits,'basket_id':np.arange(N),'count':np.random.randint(3,15,size=N),'weight':np.random.uniform(0,4,size=N)},columns=['basket_id','fruit','count','weight'])
>>> df
   basket_id   fruit  count    weight
0          0   apple     12  0.739522
1          1  orange     13  2.554757
2          2   apple     11  2.346184
3          3   apple      4  3.546212
4          4   apple      5  0.335716
5          5  orange     14  0.834428
6          6   apple      5  3.736539
7          7   apple     10  3.849816
>>> fruit_cat=df['fruit'].astype('category')
>>> fruit_cat
0     apple
1    orange
2     apple
3     apple
4     apple
5    orange
6     apple
7     apple
Name: fruit, dtype: category
Categories (2, object): [apple, orange]
>>> c=fruit_cat.values
>>> type(c)
<class 'pandas.core.arrays.categorical.Categorical'>
>>> c.categories
Index(['apple', 'orange'], dtype='object')
>>> c.codes
array([0, 1, 0, 0, 0, 1, 0, 0], dtype=int8)
>>> df['fruit']=df['fruit'].astype('category')
>>> df.fruit
0     apple
1    orange
2     apple
3     apple
4     apple
5    orange
6     apple
7     apple
Name: fruit, dtype: category
Categories (2, object): [apple, orange]
>>> my_categories=pd.Categorical(['foo','bar','baz','foo','bar'])
>>> my_categories
[foo, bar, baz, foo, bar]
Categories (3, object): [bar, baz, foo]
>>> categories=['foo','bar','baz']
>>> codes=[0,1,2,0,0,1]
>>> my_cats_2=pd.Categorical.from_codes(codes,categories)
>>> my_cats_2
[foo, bar, baz, foo, foo, bar]
Categories (3, object): [foo, bar, baz]
>>> ordered_cat=pd.Categorical.from_codes(codes,categories,ordered=True)
>>> ordered_cat
[foo, bar, baz, foo, foo, bar]
Categories (3, object): [foo < bar < baz]
>>> my_cats_2.as_ordered()
[foo, bar, baz, foo, foo, bar]
Categories (3, object): [foo < bar < baz]
>>> np.random.seed(12345)
>>> draw=np.random.randn(1000)
>>> draw[:5]
array([-0.20470766,  0.47894334, -0.51943872, -0.5557303 ,  1.96578057])
>>> bins=pd.qcut(draw,4)
>>> bins
[(-0.684, -0.0101], (-0.0101, 0.63], (-0.684, -0.0101], (-0.684, -0.0101], (0.63, 3.928], ..., (-0.0101, 0.63], (-0.684, -0.0101], (-2.9499999999999997, -0.684], (-0.0101, 0.63], (0.63, 3.928]]
Length: 1000
Categories (4, interval[float64]): [(-2.9499999999999997, -0.684] < (-0.684, -0.0101] < (-0.0101, 0.63] <
                                    (0.63, 3.928]]
>>> bins=pd.qcut(draw,4,labels=['Q1','Q2','Q3','Q4'])
>>> bins
[Q2, Q3, Q2, Q2, Q4, ..., Q3, Q2, Q1, Q3, Q4]
Length: 1000
Categories (4, object): [Q1 < Q2 < Q3 < Q4]
>>> bins.codes[:10]
array([1, 2, 1, 1, 3, 3, 2, 2, 3, 3], dtype=int8)
>>> bins=pd.Series(bins,name='quartile')
>>> bins=pd.Series(bins,name='quartile')
	     
>>> results=(pd.Series(draw)
	     .groupby(bins)
	     .agg(['count','min','max'])
	     .reset_index())
	     
>>> results
	     
  quartile  count       min       max
0       Q1    250 -2.949343 -0.685484
1       Q2    250 -0.683066 -0.010115
2       Q3    250 -0.010032  0.628894
3       Q4    250  0.634238  3.927528
>>> results['quartile']
	     
0    Q1
1    Q2
2    Q3
3    Q4
Name: quartile, dtype: category
Categories (4, object): [Q1 < Q2 < Q3 < Q4]
>>> N=10000000
	     
>>> draws=pd.Series(np.random.randn(N))
	     
>>> labels=pd.Series(['foo','bar','baz','qux']*(N//4))
	     
>>> categories=labels.astype('category')
	     
>>> labels.memory_usage()
	     
80000080
>>> categories.memory_usage()
	     
10000272
>>> %time_=labels.astype('category')
	     
SyntaxError: invalid syntax
>>> s=pd.Series(['a','b','c','d']*2)
	     
>>> cat_s=s.astype('category')
>>> cat_s
	     
0    a
1    b
2    c
3    d
4    a
5    b
6    c
7    d
dtype: category
Categories (4, object): [a, b, c, d]
>>> cat_s.cat.codes
	     
0    0
1    1
2    2
3    3
4    0
5    1
6    2
7    3
dtype: int8
>>> cat_s.cat.categories
	     
Index(['a', 'b', 'c', 'd'], dtype='object')
>>> actual_categories=['a','b','c','d','e']
	     
>>> cat_s2=cat_s.cat.set_categories(actual_categories)
	     
>>> cat_s2
	     
0    a
1    b
2    c
3    d
4    a
5    b
6    c
7    d
dtype: category
Categories (5, object): [a, b, c, d, e]
>>> cat_s.value_counts()
	     
d    2
c    2
b    2
a    2
dtype: int64
>>> cat_s2.value_counts()
	     
d    2
c    2
b    2
a    2
e    0
dtype: int64
>>> cat_s3=cat_s[cat_s.isin(['a','b'])]
	     
>>> cat_s3
	     
0    a
1    b
4    a
5    b
dtype: category
Categories (4, object): [a, b, c, d]
>>> cat_s3.cat.remove_unused_categories()
	     
0    a
1    b
4    a
5    b
dtype: category
Categories (2, object): [a, b]
>>> cat_s=pd.Series(['a','b','c','d']*2,dtype='category')
>>> pd.get_dummies(cat_s)
   a  b  c  d
0  1  0  0  0
1  0  1  0  0
2  0  0  1  0
3  0  0  0  1
4  1  0  0  0
5  0  1  0  0
6  0  0  1  0
7  0  0  0  1
